<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HEXO-BUG反馈：大写开头的标签出现404</title>
      <link href="/2021/01/10/hexo-bug-fan-kui-da-xie-kai-tou-de-biao-qian-chu-xian-404/"/>
      <url>/2021/01/10/hexo-bug-fan-kui-da-xie-kai-tou-de-biao-qian-chu-xian-404/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>突然发现我的多个标签页面页面打开都是 404 报错。</p><p>调查之后发现，问题应该是出现在大小写上。</p><h2 id="调查过程"><a href="#调查过程" class="headerlink" title="调查过程"></a>调查过程</h2><p>本地运行 <code>hexo s</code> 时标签页面运行正常，大小写标签都可以正常访问，而在服务器上运行时则出现了 404 错误。</p><p>原来 <strong>Git</strong> 默认设置了大小写不敏感，因此当你在本地新建了一个 a.txt 并提交，之后又把这个文件重命名为了 A.txt 时就会出现无法提交的情况。因为 Git 默认你的文件大小写不影响，所以你的服务器上只有一个 a.txt 存在。</p><p>到了我们这个例子上就是原本有个 tag 页面名为 git，当改名成为 Git 时你会发现本地运行时，查看这个 Git 页面是没问题的，但是到了服务器上就会出现 404 报错。而此时当你更改 URL 为 git 时这个页面又正常显示了。</p><p>知道了原理就好解决了。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>修改 git 为不忽略大小写。</p><p>进入博客文件夹，进入 git 目录：<strong>.deploy_git</strong> ，修改 .git 文件中的配置文件 config，将<code>ignorecase</code> 从 true 改为 false</p><pre><code>vim . deploy_git/.git/config- ignorecase = true+ ignorecase = false</code></pre><p>如果还没有解决，清空部署到 github 上的文件，重新发布</p><pre><code>cd .deploy_gitgit rm -rf *git commit -m &#39;clean all file&#39;git push</code></pre><p>进入博客文件夹，用 hexo 重新生成部署</p><pre><code>hexo cleanhexo ghexo d</code></pre><p>问题解决。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/hexojs/hexo/issues/818" target="_blank" rel="noopener">BUG反馈：大写开头的标签出现404</a></p>]]></content>
      
      
      <categories>
          
          <category> HEXO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客的迁移</title>
      <link href="/2021/01/01/bo-ke-de-qian-yi/"/>
      <url>/2021/01/01/bo-ke-de-qian-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h2><p>复制旧电脑上的文件，只需复制以下几个.</p><pre><code>_config.ymlpackage.jsonscaffolds/source/themes/</code></pre><p>把上述文件加载到新的博客管理文件夹中.</p><h2 id="环境搭建及部署"><a href="#环境搭建及部署" class="headerlink" title="环境搭建及部署"></a>环境搭建及部署</h2><p>进入博客目录，依次执行以下命令.</p><pre><code>npm installnpm install hexo-deployer-git --save</code></pre><p>检验</p><pre><code>hexo ghexo s</code></pre><p>此时可访问浏览器：<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就可以看到博客了.</p><p>部署</p><pre class=" language-hexo"><code class="language-hexo">hexo g -d</code></pre>]]></content>
      
      
      <categories>
          
          <category> HEXO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fullstack Academy - JavaSE - Flow Control</title>
      <link href="/2019/05/01/fullstack-academy-javase-module-1-task-5-liu-cheng-kong-zhi-yu-ju/"/>
      <url>/2019/05/01/fullstack-academy-javase-module-1-task-5-liu-cheng-kong-zhi-yu-ju/</url>
      
        <content type="html"><![CDATA[<h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><h4 id="分支结构的概念"><a href="#分支结构的概念" class="headerlink" title="分支结构的概念"></a>分支结构的概念</h4><p>当需要进行条件判断，并根据判断结果进行选择时采用分支结构。</p><h4 id="if-分支结构"><a href="#if-分支结构" class="headerlink" title="if 分支结构"></a>if 分支结构</h4><p><code>if</code> 分支结构的基本形式:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    语句块；<span class="token punctuation">}</span></code></pre><p>if 分支结构的实现参考代码 <code>IfTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*     编程使用if分支结构模拟网吧上网的过程 */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IfTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.提示用户输入年龄信息并使用变量记录</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入您的年龄："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.使用if分支结构判断是否成年并给出对应的提示</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开心的浏览起了网页..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 3.打印一句话</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"美好的时光总是短暂的！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>例：使用 <code>if</code> 分支结构查找最大值。</p><ul><li><p>方法一 在 <code>ia &gt; ib</code> 或 <code>ia &lt; ib</code> 两种情况下分别输出相应最大值(效率低)</p></li><li><p>方法二 假定一个最大值 <code>max = ia</code>,如果存在数值大于最大值则替换该值为新 <code>max</code>(效率高)</p></li></ul><p>具体请参照代码 <code>IfMaxTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程使用if分支结构查找两个整数中的最大值 */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IfMaxTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.提示用户输入两个整数并使用变量记录</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入两个整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ia <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ib <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.使用if分支结构找到最大值并打印</span>        <span class="token comment" spellcheck="true">// 方式一：使用两个if分支结构可以找到最大值</span>        <span class="token comment" spellcheck="true">/*        if(ia >= ib) {            System.out.println("最大值是：" + ia);        }        if(ia &lt; ib) {            System.out.println("最大值是：" + ib);        }        */</span>        <span class="token comment" spellcheck="true">// 方式二：假设第一个数为最大值并记录  推荐方式  通用性</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> ia<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ib <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>            max <span class="token operator">=</span> ib<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大值是："</span> <span class="token operator">+</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="if-else-分支结构"><a href="#if-else-分支结构" class="headerlink" title="if else 分支结构"></a>if else 分支结构</h4><p><code>if else</code> 分支结构的基本形式:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    语句块 <span class="token number">1</span>；<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    语句块 <span class="token number">2</span>；<span class="token punctuation">}</span></code></pre><p>代码实现请参考 <code>IfElseTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程使用if else分支结构来模拟考试成绩查询的过程 */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IfElseTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.提示用户输入考试成绩并使用变量记录</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入您的考试成绩："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> score <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.使用if else分支结构判断考试成绩是否及格并给出对应的提示</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恭喜您考试通过了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下学期来补考吧！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 3.打印一句话</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"世界上最遥远的距离不是生与死而是你在if我在else，似乎一直相伴却又永远分离！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>例：提示用户输入一个整数，判断该整数是负数，正数还是 0 并打印。</p><p>实现代码请参考 <code>IfElseJudgeTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程使用if else分支结构判断是否为负数和非负数 */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IfElseJudgeTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.提示用户输入一个整数并使用变量记录</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.使用if else分支结构判断负数和非负数并打印</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">"是负数！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//System.out.println(num + "是非负数！");</span>            <span class="token comment" spellcheck="true">// 针对目前的非负数再次判断是正数还是零</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">"是正数!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">"是零！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="else-if-分支结构"><a href="#else-if-分支结构" class="headerlink" title="else if 分支结构"></a>else if 分支结构</h4><p><code>else if</code> 分支结构的基本形式:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式 <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    语句块 <span class="token number">1</span>；<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式 <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    语句块 <span class="token number">2</span>；<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    语句块 <span class="token number">3</span>；<span class="token punctuation">}</span></code></pre><p>相关实现请参考代码 <code>IfElseifElseTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程实现if  else if  else分支结构的使用，来模拟购买火车票的过程 */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IfElseifElseTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.提示用户输入身份信息并使用变量记录</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入您的身份信息："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.使用if  else if  else分支结构判断身份信息并给出对应的提示</span>        <span class="token comment" spellcheck="true">// 判断"军人"是否等于str，是否与str的数值相等</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"军人"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请免费乘车！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"学生"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请购买半价票！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请购买全价票！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 3.打印一句话</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"坐上了火车去拉萨，去看那美丽的布达拉！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Case 1：根据用户输入的薪水计算个人所得税并打印出来。</p><p>已知：个人所得税公式为 <code>本月应缴纳税额 * 对应税率 - 速算扣除数</code></p><p>税率及速算扣除数如下所示：</p><pre><code>全月应纳税额不超过3000元 | 3% | 0全月应纳税额超过3000元至12000元  | 10% | 210全月应纳税额超过12000元至25000元 | 20% | 1410</code></pre><p>实现请参考代码 <code>IfSalaryTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程使用if else if else分支结构来计算个人所得税 */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IfSalaryTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.提示用户输入个人的薪水并使用变量记录</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入您的薪水："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 局部变量：作用范围是从声明开始一直方法体结束</span>        <span class="token keyword">int</span> salary <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.使用if else if else分支结构判断薪水所在的范围并计算对应的个人所得税</span>        <span class="token comment" spellcheck="true">// 个人所得税公式： 本月应纳税所得额 * 对应的税率 - 速算扣除数</span>        <span class="token keyword">double</span> salaryPrice <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>salary <span class="token operator">&lt;=</span> <span class="token number">5000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无需纳税！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>salary <span class="token operator">&lt;=</span> <span class="token number">8000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 块变量：作用范围是从声明开始一直到当前语句块结束</span>            salaryPrice <span class="token operator">=</span> <span class="token punctuation">(</span>salary <span class="token operator">-</span> <span class="token number">5000</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.03</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>salary <span class="token operator">&lt;=</span> <span class="token number">17000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            salaryPrice <span class="token operator">=</span> <span class="token punctuation">(</span>salary <span class="token operator">-</span> <span class="token number">5000</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.1</span> <span class="token operator">-</span> <span class="token number">210</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>salary <span class="token operator">&lt;=</span> <span class="token number">30000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            salaryPrice <span class="token operator">=</span> <span class="token punctuation">(</span>salary <span class="token operator">-</span> <span class="token number">5000</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.2</span> <span class="token operator">-</span> <span class="token number">1410</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ...</span>        <span class="token comment" spellcheck="true">// 3.打印最终的计算结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终的个人所得税是："</span> <span class="token operator">+</span> salaryPrice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注意：在本代码中可以看到，有 <code>else if</code> 的情况下，不需要写 <code>salary &gt; 5000</code> 这种情况，因为如果 <code>salary &lt;= 5000</code> 会直接进入 <code>if</code> 语句，既然到达 <code>else if</code> 语句了，那么可以认为 <code>salary &gt; 5000</code> 这一条件是默认成立的</strong></p><p>Case 2：出租车计费的实现。</p><p>相关要求及信息如下：</p><ul><li><p>出租车计费方式：由里程数和等候时间钱数相加</p></li><li><p>里程数 3 公里 13 元，超过 3 公里到 15 公里的部分每公里 2 元，15 公里以上部分每公里 3 元。</p></li><li><p>等候时间每 2 分半 1 元，不足部分不要钱</p></li><li><p>输入公里数和等候秒数，输出车费<br>例如：16 公里等候 290 秒时的车费为 <code>13 + (15 - 3) * 2 + (16 - 15) * 3 + 1 = 41</code></p></li></ul><p>相关实现请参考代码 <code>IfTaxiTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程使用if分支结构实现出租车计费系统的实现 */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IfTaxiTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.提示用户输入公里数和等待的秒数并使用变量记录</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入公里数和等待的秒数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> km <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sec <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.根据公里数计算对应的里程费并使用变量记录</span>        <span class="token keyword">int</span> kmPrice <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>km <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            kmPrice <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>km <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            kmPrice <span class="token operator">=</span> <span class="token number">13</span> <span class="token operator">+</span> <span class="token punctuation">(</span>km <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            kmPrice <span class="token operator">=</span> <span class="token number">13</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">15</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>km <span class="token operator">-</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 3.根据等待的秒数来计算对应的等待费并使用变量记录</span>        <span class="token keyword">int</span> secPrice <span class="token operator">=</span> sec <span class="token operator">/</span> <span class="token number">150</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.计算总费用并打印</span>        <span class="token keyword">int</span> sumPrice <span class="token operator">=</span> kmPrice <span class="token operator">+</span> secPrice<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本次出租车的总费用是："</span> <span class="token operator">+</span> sumPrice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="switch-case-分支结构"><a href="#switch-case-分支结构" class="headerlink" title="switch case 分支结构"></a>switch case 分支结构</h4><p><code>switch case</code> 分支结构的基本形式:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">switch</span> <span class="token punctuation">(</span>变量<span class="token operator">/</span>表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> 字面值 <span class="token number">1</span>：    语句块；    <span class="token keyword">break</span>；    <span class="token keyword">case</span> 字面值 <span class="token number">2</span><span class="token operator">:</span>    语句块；    <span class="token keyword">break</span>；    <span class="token keyword">case</span> 字面值 <span class="token number">3</span><span class="token operator">:</span>    语句块；    <span class="token keyword">break</span>；    <span class="token keyword">default</span>：    语句块；<span class="token punctuation">}</span></code></pre><p>Case 1：使用 <code>switch case</code> 分支结构实现成绩的等级判断。</p><p>成绩等级如下：</p><pre><code>90 - 100 | A80 - 89  | B70 - 79  | C60 - 69  | D0 - 59   | E</code></pre><p>具体实现请参考 <code>SwitchScoreTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程使用switch case分支结构实现考试成绩的等级判断 */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwitchScoreTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.提示用户输入考试成绩并使用变量记录  0 ~ 100</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入您的考试成绩："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> score <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.使用switch case分支结构实现考试成绩的等级判断</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>score <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//System.out.println("等级A"); //break;</span>            <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等级A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// case穿透  </span>            <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等级B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等级C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等级D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等级E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//break;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 3.打印一句话</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"世界上最痴情的等待就是我当case你当switch，或许永远都不会选到自己！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>补充：<code>switch()</code> 中原本支持的数据类型有 <code>byte</code>, <code>short</code>, <code>char</code> 和 <code>int</code>，从 jdk1.5 开始支持枚举型，从 jdk1.7 开始支持 String 类型</strong></p><p>Case 2：使用 <code>switch case</code> 分支结构实现菜单效果。</p><p>具体实现请参考 <code>SwitchMenuTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程使用switch case分支结构来模拟菜单的效果 */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwitchMenuTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.绘制字符界面</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"         欢迎来到菜单选项界面"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" [1]学员系统     "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[2]管理员系统"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" [0]退出系统"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请选择要进入的系统："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> choose <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.使用switch case分支结构来模拟用户的选择并给出提示</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>choose<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在进入学员系统..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在进入管理员系统..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"谢谢使用，下次再见！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入错误，请重新选择！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="循环结构的概念"><a href="#循环结构的概念" class="headerlink" title="循环结构的概念"></a>循环结构的概念</h4><p>在程序中希望重复执行代码时，就要用到循环结构。</p><h4 id="for-循环的概念和使用"><a href="#for-循环的概念和使用" class="headerlink" title="for 循环的概念和使用"></a>for 循环的概念和使用</h4><p><code>for</code> 循环结构的基本形式:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>初始表达式；条件表达式；修改初始表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    循环体；<span class="token punctuation">}</span></code></pre><p><code>for</code> 循环的实现请参考代码 <code>ForTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程实现for循环的使用，模拟玩游戏的过程 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// i = i + 1  => i += 1  => i++</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今晚吃鸡，大吉大利，正在进行第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"场游戏..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 表示模拟睡眠5秒的效果</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本场游戏结束！\n\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"该休息了，否则明天早上就要迟到了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Case 1：使用 <code>for</code> 循环打印 1-100 之间的所有奇数。</p><p>具体实现请参考代码 <code>ForNumTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程使用for循环实现1 ~ 100之间所有奇数的打印 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForNumTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.使用for循环打印1 ~ 100之间的所有奇数</span>        <span class="token comment" spellcheck="true">// 方式一：根据奇数的概念进行打印</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 若当前i的数值是奇数时则打印，否则不打印   奇数就是不能被2整除的数，也就是对2取余的结果不为0</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 方式二：根据等差数列的概念来打印  每两个数据之间相差2</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 方式三：根据通项公式的规则来打印  2*i-1</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i = "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Case 2：使用 <code>for</code> 循环实现累加。</p><p>具体实现请参考代码 <code>ForSumTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程使用for循环实现1 ~ 10000之间所有整数的累加和 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForSumTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 2.声明一个变量负责记录累加的结果</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.使用for循环打印1 ~ 10000之间的所有整数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 打印后不换行</span>            <span class="token comment" spellcheck="true">//System.out.print(i + " ");</span>            <span class="token comment" spellcheck="true">// 将所有i的取值都累加到变量sum中</span>            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// sum = sum + i;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 专门用于换行</span>        <span class="token comment" spellcheck="true">//System.out.println();</span>        <span class="token comment" spellcheck="true">// 3.打印最终的累加结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum = "</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Case 3：使用 <code>for</code> 循环打印三位数中的水仙花数。</p><p>已知：所谓<strong>水仙花数</strong>即一个整数满足其值等于各个数位的立方和。<br>如：<code>153</code> 是一个水仙花数，因为 <code>1^3 + 5^3 + 3^3 = 153</code>。</p><p>具体实现请参考代码 <code>ForWaterTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程使用for循环打印三位数中的所有水仙花数 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForWaterTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.使用for循环打印所有的三位数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">999</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 3.拆分三位数中的各个数位上的数字</span>            <span class="token comment" spellcheck="true">// 123 / 100 = 1;        123 % 100 => 23 / 10 = 2;    123 % 10 = 3;</span>            <span class="token keyword">int</span> ia <span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 拆分百位数</span>            <span class="token keyword">int</span> ib <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 拆分十位数</span>            <span class="token keyword">int</span> ic <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 拆分个位数</span>            <span class="token comment" spellcheck="true">// 2.针对每个三位数都要判断该数是否为水仙花数，若是则打印，否则不打印</span>            <span class="token comment" spellcheck="true">// 判断该数是否等于各个数位的立方和</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ia<span class="token operator">*</span>ia<span class="token operator">*</span>ia <span class="token operator">+</span> ib<span class="token operator">*</span>ib<span class="token operator">*</span>ib <span class="token operator">+</span> ic<span class="token operator">*</span>ic<span class="token operator">*</span>ic<span class="token punctuation">)</span> <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><strong>注意：双重 <code>for</code> 循环案例</strong></li></ul><p>Case 1：打印 5 行 5 列 <code>&quot;Li Ruoyu&quot;</code>。</p><p>具体实现代码请参考 <code>ForForTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程实现双重for循环的使用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForForTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 3.使用for循环打印5行5列字符串内容"Li Ruoyu"</span>        <span class="token comment" spellcheck="true">// 外层循环主要用于控制打印的行数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 内层循环主要用于控制打印的列数</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Li Ruoyu "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注意：双层 <code>for</code> 循环的外层用于控制打印的行数，内层循环用于控制打印的列数，外层循环改一下，内层循环从头到尾跑一圈。在开发中只要需要打印多行多列时，就可采用双重 <code>for</code> 循环。</strong></p><p>Case 2：使用双层 <code>for</code> 循环实现如下图案。</p><pre><code>*****       *           *****       *       *****       **          ****       ********       ***         ***       **********       ****        **       ************       *****       *       *********</code></pre><p>具体实现请参考代码 <code>ForForStarTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程使用双重for循环打印星星图案 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForForStarTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.打印第一个星星图案</span>        <span class="token comment" spellcheck="true">// 外层循环主要用于控制打印的行数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 内层循环主要用于控制打印的列数</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.打印第二个星星图案</span>        <span class="token comment" spellcheck="true">// 外层循环主要用于控制打印的行数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 内层循环主要用于控制打印的列数  也就是当前行的列数与当前行的行数是相等关系</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.打印第三个星星图案</span>        <span class="token comment" spellcheck="true">// 外层循环主要用于控制打印的行数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 内层循环主要用于控制打印的列数  也就是当前行的列数与当前行的行数相加为6的关系</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.打印第四个星星图案</span>        <span class="token comment" spellcheck="true">// 外层循环主要用于控制打印的行数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 控制空格的个数</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 内层循环主要用于控制打印的列数  也就是当前行的列数与当前行的行数为 2*i-1 的关系</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Case 3：使用双重 <code>for</code> 循环打印 <code>九九乘法表</code> (打印到 <code>6 * 6</code> 结束)。</p><p><strong>注意：为了跳出多重循环体，用到了下面关于如何利用 <code>break</code> 跳出双重 <code>for</code> 循环的相关知识。</strong></p><p>具体实现请参考代码 <code>ForForTableTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    使用双重for循环打印九九乘法表 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForForTableTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.使用外层for循环控制打印的行数，一共9行</span>        outer<span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 2.使用内层for循环控制打印的列数，最多9列，规律是：与当前行所在的行数相等</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 3.使用两个循环变量来拼接等式</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> j<span class="token operator">*</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 4.当打印完毕6*6 = 36后结束整个打印</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">==</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//break; // 主要用于跳出循环，但该关键字只能跳出当前所在的循环</span>                    <span class="token keyword">break</span> outer<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 表示可以跳出外层for循环</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Case 4：使用双重 <code>for</code> 循环打印 2 ～ 100 之间的所有素数。</p><ul><li><p>关于素数：只能被 1 和其本身整除的整数</p></li><li><p>思路：只要将整数 <code>n</code> 依次除以 <code>2 ~ n-1</code> 的所有整数即可</p></li></ul><p>具体实现请参考代码 <code>ForForPrimeTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程使用双重for循环打印2 ~ 100之间的所有素数 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForForPrimeTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.使用for循环打印2 ~ 100之间的所有整数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 3.声明一个boolean类型的变量作为是否为素数的标记</span>            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 2.针对每一个当前的整数都要判断是否为素数，若是素数则打印，否则不打印</span>            <span class="token comment" spellcheck="true">// 判断一个数是否为素数的方法是：若该数不能被2到它本身-1之间的所有整数整除时，则证明该数是素数</span>            <span class="token comment" spellcheck="true">// 使用内层for循环用于控制2到该数自身-1之间的范围</span>            <span class="token comment" spellcheck="true">//for(int j = 2; j &lt; i; j++) {</span>            <span class="token comment" spellcheck="true">// 只需要判断2到该数的平方根即可，因为随着除数的增大商必然减小，会造成重复的判断</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 使用当前数除以该循环中的每个数据并判断是否可以整除，只要找到一个可以整除的数据，则证明该数不是素数</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> i <span class="token operator">%</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 跳出当前所在的内层循环，也就是不需要再继续除以下一个整数</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 只可以打印素数</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注意：在本例中，对素数的输出实现进行了优化，因为随着除数的增大，商会减小，会造成计算重复，因此只需要判断 <code>2 ~ n^1/2</code> 就足够</strong></p><h4 id="while-循环的概念和使用"><a href="#while-循环的概念和使用" class="headerlink" title="while 循环的概念和使用"></a>while 循环的概念和使用</h4><p><code>while</code> 循环结构的基本形式:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    循环体；<span class="token punctuation">}</span></code></pre><p><code>while</code> 循环的基本使用以及和 <code>for</code> 循环的对比请参考代码 <code>WhileTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程实现while循环的使用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WhileTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.使用for循环打印1 ~ 10之间的所有整数</span>        <span class="token comment" spellcheck="true">// 在()或{}中声明的变量叫做块变量，作用范围是从声明开始一直到语句块结束</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.使用while循环打印1 ~ 10之间的所有整数</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Case 1：分别使用 <code>while</code> 循环和 <code>for</code> 循环计算调和数列的和并打印。</p><p><strong>已知：调和数列为：<code>1/1 + 1/2 + ··· + 1/n</code>。</strong></p><p>具体实现请参考代码 <code>WhileSumTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程使用while循环实现调和数列的累加和并打印 */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WhileSumTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.提示用户输入一个整数并使用变量记录</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.使用while循环计算调和数列的和并使用变量记录</span>        <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        for(int i = 1; i &lt;= num; i++) {            sum += 1.0/i;        }        */</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> <span class="token number">1.0</span><span class="token operator">/</span>i<span class="token punctuation">;</span>             i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 3.打印最终的计算结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终的计算结果是："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong><code>while</code> 循环和 <code>for</code>循环的对比</strong></p><ul><li><p>二者完全可以互换，但优先使用 <code>for</code> 循环</p></li><li><p><code>while</code> 循环更适用于明确循环条件但不明确循环次数的场合</p></li><li><p><code>for</code> 循环更适用于明确循环次数或范围的场合</p></li></ul><p>比如如下案例适用于 <code>while</code> 循环。</p><p>case 2：提示用户输入一个<strong>任意位数</strong>的正整数然后反向输出。</p><p><strong>思路：</strong>通过 <code>n % 10</code> 取得个位数，再通过 <code>n / 10</code> 丢弃个位数来反向获取各个数位上的数值直到 <code>n / 10 = 0</code> 结束。</p><p><strong>为何适用于 <code>while</code> 循环</strong></p><ul><li><p>循环条件明确 <code>n / 10 = 0</code></p></li><li><p>循环次数不明确 位数不确定</p><p>因此使用 <code>while</code> 循环比较合适。</p><p>本例的实现可参考代码 <code>WhileReverseTest.java</code></p></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程使用while循环实现任意正整数的反向输出 */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WhileReverseTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.提示用户输入一个正整数并使用变量记录  123</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个正整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.使用while循环进行拆分并打印</span>        <span class="token comment" spellcheck="true">//while(num > 0) {</span>            <span class="token comment" spellcheck="true">//System.out.print(num % 10);  // 拆分个位数</span>            <span class="token comment" spellcheck="true">//num /= 10;  // 丢弃个位数</span>        <span class="token comment" spellcheck="true">//}</span>        <span class="token comment" spellcheck="true">// 2.使用while循环拆分整数中的每个数字并记录到变量中</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> num<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 指定变量作为num的替身</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">=</span> res<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> temp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3     32   321</span>            temp <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 12    1    0</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 3.打印逆序后的结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">"逆序后的结果是："</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="do-while-循环的概念和使用"><a href="#do-while-循环的概念和使用" class="headerlink" title="do while 循环的概念和使用"></a>do while 循环的概念和使用</h4><p><code>do while</code> 循环结构的基本形式:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">do</span> <span class="token punctuation">{</span>    循环体<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span>；</code></pre><p>先执行循环体，再判断条件表达式是否成立。(至少执行一次循环体，其他和 <code>while</code> 循环并无不同)</p><p>使用 <code>java 中的所有循环方式</code> 实现输出 1 ～ 10 之间的所有整数。</p><p>参考代码 <code>DoWhileTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程实现do while循环的使用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoWhileTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.使用for循环打印1 ~ 10之间的所有整数</span>        <span class="token comment" spellcheck="true">// 在()或{}中声明的变量叫做块变量，作用范围是从声明开始一直到语句块结束</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.使用while循环打印1 ~ 10之间的所有整数</span>        <span class="token comment" spellcheck="true">//int i = 1;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用do while循环打印1 ~ 10之间的所有整数</span>        <span class="token comment" spellcheck="true">//i = 1;</span>        i <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Case：使用 <code>do while</code> 循环来模拟学习任务是否合格的检查，如果合格即停止，否则重新完成学习任务。</p><p><strong>采用 <code>do while</code> 循环更合适是因为无论最初是否合格都要至少检查一次</strong></p><p>具体实现可参考代码 <code>DoWhileCheckTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程使用do while循环来模拟学习效果的检查 */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoWhileCheckTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String msg <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 空 </span>         <span class="token keyword">do</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在疯狂学习中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 模拟5秒钟</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否合格？（y/n）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            msg <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"y"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恭喜任务合格！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 典故： 十动然拒    笔试考点：有没有分号</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">10000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 空语句，可以用于延时</span>        <span class="token punctuation">}</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I Love You !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注意：如上代码中简单介绍了分号在 <code>while</code> 循环中的作用，如果是 <code>while (i &lt;= 10000)</code> 则不会运行下面的输出，其等价于：</strong></p><pre><code>while(i &lt;= 10000) {            ;  // 空语句,可以用于延时        }</code></pre><h4 id="continue-关键字的概念和使用"><a href="#continue-关键字的概念和使用" class="headerlink" title="continue 关键字的概念和使用"></a>continue 关键字的概念和使用</h4><p><code>continue</code> 语句用在循环体中，用于提前结束本次循环而开始下一次循环。</p><p>Case：使用 <code>for</code> 循环打印 1 ～ 20 之间的所有整数，遇到 5 的倍数则跳过不打印。</p><p>具体实现请参考代码 <code>ForContinueTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程实现continue关键字的使用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForContinueTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.使用for循环打印1 ~ 20之间的所有整数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 若遇到5的倍数则跳过不打印该数，转而继续打印下一个数</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> i <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 表示提前结束本次循环，继续下一次循环，也就是奔向了i++</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="break-关键字和死循环概念和使用"><a href="#break-关键字和死循环概念和使用" class="headerlink" title="break 关键字和死循环概念和使用"></a>break 关键字和死循环概念和使用</h4><ul><li><p><code>break</code> 关键字用于退出当前语块(比如 <code>switch case</code> 结构体)，<code>break</code> 用在循环体中用于退出循环，且常用于 <code>死循环</code> 。</p></li><li><p><code>for (;;)</code> 或 <code>while(true)</code> 这种没有循环条件的循环叫做无限循环或 <code>死循环</code></p></li></ul><p>Case 1：不断提示用户输入聊天内容并输出，直到用户输入 <code>bye</code> 结束聊天。</p><p>具体实现请参考代码 <code>ForBreakTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程使用for循环和break关键字来模拟聊天的过程 */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForBreakTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 5.声明一个boolean类型的变量作为发送方的标志</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.使用无限循环来模拟不断地聊天</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 1.提示用户输入要发送的聊天内容并使用变量记录</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>flag<span class="token operator">?</span> <span class="token string">"张三"</span><span class="token operator">:</span> <span class="token string">"李四"</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"输入要发送的聊天内容："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 2.判断用户输入的内容是否为"bye"，若是则聊天结束</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"聊天结束！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用于跳出当前循环</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 3.若不是则打印用户输入的聊天内容</span>            <span class="token comment" spellcheck="true">//else {</span>                <span class="token comment" spellcheck="true">//System.out.println("聊天内容是：" + str);</span>            <span class="token comment" spellcheck="true">//}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>flag<span class="token operator">?</span> <span class="token string">"张三说："</span><span class="token operator">:</span> <span class="token string">"李四说："</span><span class="token punctuation">)</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token string">"\n\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token operator">!</span>flag<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注意：在这份代码中使用了布尔类型的 <code>flag</code> 控制了说话人的角色，可以用作参考。</strong></p><p>Case 2：实现一个猜数字游戏，随机生成数字 n (0 ~ 100)，根据用户的输入比较输出 <code>猜大了</code> ，<code>猜小了</code> 等，如果用户猜对了则结束游戏。</p><p>具体实现可参考代码 <code>ForGuessTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程使用for循环实现猜数字游戏 */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForGuessTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.随机生成1 ~ 100之间的整数并使用变量记录</span>        Random ra <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> ra<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//System.out.println("temp = " + temp);</span>        <span class="token comment" spellcheck="true">// 4.声明一个int类型的变量来统计用户猜测的次数</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 2.提示用户输入1 ~ 100之间猜测的整数并使用变量记录</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入1 ~ 100之间猜测的整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 3.使用用户输入的整数与随机数之间比较大小并给出对应的提示</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">></span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猜大了，再小一点吧！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&lt;</span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猜小了，再大一点吧！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恭喜您猜对了，游戏结束！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> cnt<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你果然是个大咖！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"水平不错，继续加油哦！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你还可以多玩几次游戏！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong><code>break</code> 正常来讲只能跳出当前循环体，如果要跳出多重循环，则可用添加 <code>标号</code> 的方式</strong> </p><pre class=" language-java"><code class="language-java">outer<span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">break</span> outer<span class="token operator">:</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Fullstack Academy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fullstack Academy - JavaSE - Arrays</title>
      <link href="/2019/04/01/fullstack-academy-javase-module-1-task-4-shu-zu/"/>
      <url>/2019/04/01/fullstack-academy-javase-module-1-task-4-shu-zu/</url>
      
        <content type="html"><![CDATA[<h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><h4 id="一维数组的相关概念"><a href="#一维数组的相关概念" class="headerlink" title="一维数组的相关概念"></a>一维数组的相关概念</h4><p>当需要在 java 程序中记录单个数据内容时，则声明一个变量即可。但当需要在 java 程序中记录多个<strong>类型相同的数据内容</strong>时则声明一个一维数组即可。</p><p>一维数组本质上就是在内存空间中申请一段连续的存储单元。</p><p>数组是相同数据类型的多个元素的容器，元素按线性顺序排列，在 java 语言中体现为一种引用数据类型。</p><h4 id="一维数组的声明及使用"><a href="#一维数组的声明及使用" class="headerlink" title="一维数组的声明及使用"></a>一维数组的声明及使用</h4><p>一维数组的声明格式：</p><pre class=" language-java"><code class="language-java">数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名称 <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span>数组的长度<span class="token punctuation">]</span>或数据类型 数组名称<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span>数组的长度<span class="token punctuation">]</span> 不推荐</code></pre><ul><li><p>数组的长度可以通过 <code>数组名称.length</code> 获取</p></li><li><p>可以通过下标的方式访问数组中的每一个元素。需要注意的是，数组的下标从 <code>0</code> 开始，对于长度为 n 的数组，下标的取值范围为 <code>0 ~ n-1</code>，取值超出下标的取值范围时会报错。</p></li></ul><p>一维数组的使用请参考代码 <code>ArrayTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程实现一维数组的声明和使用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.声明一个长度为2元素类型为int类型的一维数组</span>        <span class="token comment" spellcheck="true">// 数据类型[] 数组名称 = new 数据类型[数组的长度];</span>        <span class="token comment" spellcheck="true">//int arr1[] = new int[2];    // 两种方式从结果上来说是一样的，不推荐使用</span>        <span class="token comment" spellcheck="true">//int num = 2;                // 声明一个初始值为2的变量 </span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 推荐该方式，更容易与变量的声明区分，提高了代码的可读性   动态方式</span>        <span class="token comment" spellcheck="true">// 2.打印一维数组的长度以及每个元素的数值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组的长度是："</span> <span class="token operator">+</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2   下标从0 ~ 1</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下标为0的元素是："</span> <span class="token operator">+</span> arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 0  默认值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下标为1的元素是："</span> <span class="token operator">+</span> arr1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 0  </span>        <span class="token comment" spellcheck="true">//System.out.println("下标为2的元素是：" + arr1[2]);     // 编译ok，运行发生ArrayIndexOutOfBoundsException数组下标越界异常</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.使用for循环打印数组中的所有元素</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下标为"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"的元素是："</span> <span class="token operator">+</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 全是0</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 7.直接通过数组名来打印数组中的所有元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"arr1 = "</span> <span class="token operator">+</span> arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 地址信息</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.声明一个长度为5元素类型为double类型的一维数组</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印数组中每个元素值</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下标为"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"的元素是："</span> <span class="token operator">+</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 全是0.0 </span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5.声明数组的同时就对数组中的元素进行初始化   静态方式的简化版</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印数组中的每个元素值</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr3<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下标为"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"的元素是："</span> <span class="token operator">+</span> arr3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a b c d</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 6.特殊的写法   静态方式</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印数组中的每个元素值</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr4<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下标为"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"的元素是："</span> <span class="token operator">+</span> arr4<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true true false false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="一维数组的初始化"><a href="#一维数组的初始化" class="headerlink" title="一维数组的初始化"></a>一维数组的初始化</h4><ul><li>动态初始化</li></ul><p>在<strong>一维数组的声明及使用</strong>章节中曾介绍了一维数组的声明方式：</p><pre class=" language-java"><code class="language-java">数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名称 <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span>数组的长度<span class="token punctuation">]</span>或数据类型 数组名称<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span>数组的长度<span class="token punctuation">]</span> 不推荐</code></pre><p>这种方式由于没有对初始值进行定义，称为动态初始化。</p><p>在动态初始化时，基本类型的数组(数据元素为基本类型)创建后，其元素的初始值：byte, short, char, int, long 为 0， float, double 为 0.0， boolean 为 false</p><ul><li>静态初始化</li></ul><p>可以在数组声明的同时进行初始化，这种方法称为静态初始化，具体如下：</p><pre class=" language-java"><code class="language-java">数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名称 <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>初始值<span class="token number">1</span>，初始值<span class="token number">2</span>···<span class="token punctuation">}</span> 或简化版数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名称 <span class="token operator">=</span> <span class="token punctuation">{</span>初始值<span class="token number">1</span>，初始值<span class="token number">2</span>···<span class="token punctuation">}</span> 推荐使用</code></pre><h4 id="一维数组特点"><a href="#一维数组特点" class="headerlink" title="一维数组特点"></a>一维数组特点</h4><ul><li><p>可以直接通过下标访问指定位置的元素，速度很快</p></li><li><p>数组要求所有元素的类型必须相同</p></li><li><p>要求内存空间必须连续且内存长度一旦确定无法修改</p></li></ul><p>如果是在内存空间不足，则应考虑申请一段更大的内存并将原有内存中的数据依次拷贝。</p><ul><li>增加和删除元素时可能会移动大量元素，效率低</li></ul><h4 id="内存结构分析"><a href="#内存结构分析" class="headerlink" title="内存结构分析"></a>内存结构分析</h4><pre class=" language-java"><code class="language-java">数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名称 <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span>数组的长度<span class="token punctuation">]</span></code></pre><p>在上述声明中，<code>=左边</code> 代表的是变量的声明，<code>=右边</code> 代表的是一维数组的声明，那么声明一维数组时究竟是如何申请内存空间的，这就要了解 <code>栈区</code> 和 <code>堆区</code> 的概念。</p><ul><li>栈区</li></ul><p>栈用于存放程序运行过程中所有的局部变量。一个运行的 java 程序从开始到结束会有多次变量的声明。</p><p>例如所有在方法体中直接声明且随着方法体执行结束而释放的变量叫做局部变量，<code>int 变量名 = 变量值</code> 就是声明局部变量的一种表现形式。此时，在栈区为声明的变量申请了内存空间。</p><ul><li>堆区</li></ul><p>JVM 会在其内存空间中开辟一个称为 <code>堆</code> 的存储空间，这部分用于存储使用 <code>new</code> 关键字创建的数组和对象。</p><p>如上介绍可知，当声明一维数组时 <code>int[] arr = new int[5]</code> 中， <code>=</code> 右边为在堆区申请一段长度为 5 的内存，并填入初始值 0， 这一段堆区内存会有一个地址，假设地址为 <code>0x10</code>，<code>=</code> 左边为在栈区申请一个 int 数据类型的内存叫做 arr，<code>=</code> 的作用是将地址 <code>0x10</code> 填入 arr 的内存,当访问一维数组 arr 时，则根据 <code>0x10</code> 这一地址找到堆区中的那段内存。</p><p>而在这一过程中，原本作为基本数据类型的 <code>int</code> 在此时也由于变成 <code>int[]</code> 且引用了堆区的内存地址而被称为<strong>引用数据类型。</strong></p><h4 id="一维数组的案例"><a href="#一维数组的案例" class="headerlink" title="一维数组的案例"></a>一维数组的案例</h4><h5 id="案例一：-一维数组的-CRUD-案例"><a href="#案例一：-一维数组的-CRUD-案例" class="headerlink" title="案例一： 一维数组的 CRUD 案例"></a>案例一： 一维数组的 CRUD 案例</h5><p>请使用一维数组完成如下要求：</p><ul><li><p>声明一个长度为 5 元素类型为 <code>int</code> 类型的数组，打印数组中所有元素的值</p></li><li><p>使用元素 11，22，33，44 分别对数组中前四个元素赋值后再打印</p></li><li><p>将元素 55 插入到下标为 0 的位置，原有元素向后移动，再打印所有元素值</p></li><li><p>将元素 55 从数组中删除，删除方式为后续元素向前移动，最后位置置为 0 并打印</p></li><li><p>查找数组中是否存在 22，若存在则修改为 220 并再次打印所有元素</p></li></ul><p>实现代码请参考 <code>ArrayOpTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程实现一维数组的增删改查操作*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayOpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.声明一个长度为5元素类型为int类型的一维数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印数组中所有元素的数值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"数组中的元素有："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 全是默认值0</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.将数据11 22 33 44依次对数组中前四个元素赋值</span>        <span class="token comment" spellcheck="true">/*        arr[0] = 11;        arr[1] = 22;        arr[2] = 33;        arr[3] = 44;        */</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">11</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 打印数组中所有元素的数值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"数组中的元素有："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11 22 33 44 0</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.将数据55插入到下标为0的位置，原有元素向后移动</span>        <span class="token comment" spellcheck="true">/*        arr[4] = arr[3];        arr[3] = arr[2];        arr[2] = arr[1];        arr[1] = arr[0];        arr[0] = 55;        */</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印数组中所有元素的数值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"数组中的元素有："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 55 11 22 33 44</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.将数据55从数组中删除，删除方式为后续元素向前移动，最后一个位置置为0</span>        <span class="token comment" spellcheck="true">/*        arr[0] = arr[1];        arr[1] = arr[2];        arr[2] = arr[3];        arr[3] = arr[4];        */</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印数组中所有元素的数值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"数组中的元素有："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11 22 33 44 0</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5.查找数组中是否有元素22，若有则修改为220</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">22</span> <span class="token operator">==</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">220</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 打印数组中所有元素的数值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"数组中的元素有："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11 220 33 44 0</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="案例二：一维数组之间元素的拷贝案例"><a href="#案例二：一维数组之间元素的拷贝案例" class="headerlink" title="案例二：一维数组之间元素的拷贝案例"></a>案例二：一维数组之间元素的拷贝案例</h5><p>请实现如下要求：</p><ul><li><p>声明一个初始值为 <code>11 22 33 44 55</code> 的一维数组并打印所有元素</p></li><li><p>声明一个长度为 3 数据类型为 int 的一维数组并打印所有元素</p></li><li><p>实现将第一个数组 <code>中间三个</code> 元素复制到第二个数组中</p></li><li><p>打印第二个数组的所有元素</p></li></ul><p>实现，优化，官方提供的数组拷贝功能 <code>System.arraycopy</code> 以及注意点请参考代码 <code>ArrayCopyTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程实现数组之间元素的拷贝 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayCopyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.声明一个初始值为11、22、33、44、55的一维数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印数组中的所有元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"第一个数组中的元素有："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11 22 33 44 55</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.声明一个长度为3元素类型为int类型的一维数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> brr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印数组中的所有元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"第二个数组中的元素有："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> brr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>brr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0 0 0</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.将第一个数组中的中间3个元素赋值到第二个数组中</span>        <span class="token comment" spellcheck="true">/*        brr[0] = arr[1];        brr[1] = arr[2];        brr[2] = arr[3];        */</span>        <span class="token comment" spellcheck="true">/*        for(int i = 0; i &lt; brr.length; i++) {            brr[i] = arr[i+1];        }        */</span>        <span class="token comment" spellcheck="true">// 可以直接使用Java官方提供的拷贝功能</span>        <span class="token comment" spellcheck="true">// 表示将数组arr中下标从1开始的3个元素拷贝到数组brr中下标从0开始的位置</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> brr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印第二个数组中的所有元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"第二个数组中的元素有："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> brr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>brr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 22 33 44</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.笔试考点</span>        <span class="token comment" spellcheck="true">// 表示将变量arr的数值赋值给变量brr，覆盖变量brr中原来的数值</span>        <span class="token comment" spellcheck="true">// 数组名arr的内存空间中存放的是数据在堆区中的内存地址信息，赋值后让brr变量中存放了arr所指向堆区的内存地址</span>        <span class="token comment" spellcheck="true">// 也就是让brr和arr指向了同一块堆区空间，有本质上就是改变指向而已</span>        brr <span class="token operator">=</span> arr<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印第二个数组中的所有元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"第二个数组中的元素有："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> brr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>brr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 22 33 44</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="案例三：一维数组统计数字次数案例"><a href="#案例三：一维数组统计数字次数案例" class="headerlink" title="案例三：一维数组统计数字次数案例"></a>案例三：一维数组统计数字次数案例</h5><p>要求：编程统计用户输入任意一个正整数中每个数字出现的次数。</p><p>例：数字 <code>123123</code> 中，1，2，3分别出现 2 次。 </p><ul><li>原理分析</li></ul><p>首先为了对用户输入的正整数中各个数字出现的次数进行统计，需要对输入的正整数并进行拆分。</p><pre><code>123123 % 10 = 3 拆分末位123123 / 10 = 12312 丢弃末位12312 % 10 = 2 拆分末位12312 / 10 = 1231 丢弃末位···1 / 10 = 0 0 为终止条件</code></pre><p>拆分后就可以对各个数字进行统计。已知数字由 0 ～ 9 组成，因此可以组成一个由 0 ～ 9 组成的 10 位一维数组。而拆分出的末位数字(例如 i )就可以作为一维数组的下标 <code>arr[i]</code>，0 ～ 9 中的数字每出现一次，就通过 <code>arr[i]++</code> 对值进行更新，最终获得各个数字出现的次数。</p><style>table {  table-layout: fixed;  width: 400px;}</style><table><thead><tr><th>数值</th><th>0</th><th>2</th><th>2</th><th>2</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th></tr></thead><tbody><tr><td>下标</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr></tbody></table><ul><li>代码实现</li></ul><p>具体实现请参考代码 <code>ArrayCountTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程使用数组实现正整数中每个数字出现次数的统计 */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayCountTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.提示用户输入一个正整数并使用变量记录</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个正整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.准备一个长度为10元素类型int类型的一维数组，默认值为0</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.拆分正整数中的每个数字并统计到一维数组中</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>temp<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            temp <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 4.打印最终的统计结果</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数字"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"出现了"</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"次！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="案例四：学生考试成绩的录入与打印"><a href="#案例四：学生考试成绩的录入与打印" class="headerlink" title="案例四：学生考试成绩的录入与打印"></a>案例四：学生考试成绩的录入与打印</h5><p>要求：</p><ul><li><p>提示用户输入学生的人数及每个学生的成绩并打印出来</p></li><li><p>计算该班级的总分和平均分并打印</p></li></ul><p>具体实现请参考代码 <code>ArrayScoreTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程使用数组来记录学生的考试成绩并打印 */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayScoreTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.提示用户输入学生的人数并使用变量记录</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生的人数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.根据学生的人数来声明对应长度的数组负责记录学生的考试成绩</span>        <span class="token comment" spellcheck="true">// 变长数组 ： 主要指变量可以作为数组的长度，但绝不是数组的长度可以发生改变</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> scores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.提示用户输入每个学生的考试成绩并记录一维数组中</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"个学生的考试成绩："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 4.打印所有学生的考试成绩</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"本班学生的考试成绩分别是："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> scores<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5.计算本班级学生的总分以及平均分并使用变量记录</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> scores<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">double</span> avg <span class="token operator">=</span> sum<span class="token operator">*</span><span class="token number">1.0</span> <span class="token operator">/</span> num<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印最终的计算结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本班级学生的总分是："</span> <span class="token operator">+</span> sum <span class="token operator">+</span> <span class="token string">"，平均分是："</span> <span class="token operator">+</span> avg<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 6.查找本班所有学生考试成绩中的最低分和最高分并打印出来</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原始的考试成绩是："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用工具类中的排序方法对所有考试成绩进行从小到大的排序</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后的考试成绩是："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最低分是："</span> <span class="token operator">+</span> scores<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"，最高分是："</span> <span class="token operator">+</span> scores<span class="token punctuation">[</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从数组中查找指定元素所在的下标位置</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"59分在数组中的下标位置是："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>scores<span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"60分在数组中的下标位置是："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>scores<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="数组相关常用工具类"><a href="#数组相关常用工具类" class="headerlink" title="数组相关常用工具类"></a>数组相关常用工具类</h4><ul><li>static String toString(int[] a) </li></ul><p>功能：输出数组中的内容。</p><p>用法：<code>Arrays.toString(数组名)</code>。</p><ul><li>static void fill(int[] a, int Val)</li></ul><p>功能：将参数指定元素赋值给数组中的所有元素。</p><p>用法：<code>Arrays.fill(数组名, 填充数)</code>。</p><ul><li>static boolean equals(int[] a, int[] b)</li></ul><p>功能：判断两个数组的元素内容和次序是否相同，完全相同返回 <code>true</code>，反之返回 <code>false</code>。</p><p>用法：<code>Arrays.equals(数组名1, 数组名2)</code>。</p><ul><li>static void sort(int[] a)</li></ul><p>功能：对数组的元素进行从小到大排序。</p><p>用法：<code>Arrays.sort(数组名)</code>。</p><ul><li>static int binarySearch(int[] a, int Key)</li></ul><p>功能：从数组中查找参数指定元素所在位置。</p><p>用法：<code>Arrays.binarySearch(arr, 1)</code> </p><p>返回值：<code>arr[1]</code> 所在位置。</p><p>各个常用工具类的使用请参考代码 <code>ArraysTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程实现数组工具类的使用 */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArraysTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.声明一个初始值为10、20、30、40、50的一维数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.使用原始方式打印数组中的所有元素，要求打印格式为：[10, 20, 30, 40, 50]</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"第一个数组中的元素有：["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 当打印的元素是最后一个元素时，则直接打印元素本身即可</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 否则打印元素后打印逗号加空格</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.使用数组工具类实现数组中所有元素的打印</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一个数组中的元素有："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [10, 20, 30, 40, 50]</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.声明一个长度为5元素类型为int类型的一维数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二个数组中的元素有："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [0, 0, 0, 0, 0]</span>        <span class="token comment" spellcheck="true">// 使用数组工具类中的fill方法实现数组中元素的填充并打印</span>        <span class="token comment" spellcheck="true">// 表示使用10来填充数组arr中的每个元素，也就是给数组中每个元素赋值为10</span>        Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二个数组中的元素有："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [10, 10, 10, 10, 10]</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5.声明一个长度为5元素类型为int类型的一维数组并初始化</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>arr3<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第三个数组中的元素有："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [10, 10, 10, 10, 10]</span>        <span class="token comment" spellcheck="true">// 判断该数组是否与上述数组相等并打印，若相同则打印true，否则打印false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> arr3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>        <span class="token comment" spellcheck="true">// 修改数组3中的元素值</span>        arr3<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第三个数组中的元素有："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [10, 10, 10, 10, 20]</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> arr3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false  要求内容要相同</span>        arr2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二个数组中的元素有："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [10, 10, 10, 20, 10]</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> arr3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false  要求顺序要相同</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><h4 id="二维数组的基本概念"><a href="#二维数组的基本概念" class="headerlink" title="二维数组的基本概念"></a>二维数组的基本概念</h4><p>二维数组本质上就是由多个一维数组组合成的数组，二维数组中的每一个元素都是一维数组，而一维数组中的每个元素才是数据内容。</p><h4 id="二维数组的声明及使用"><a href="#二维数组的声明及使用" class="headerlink" title="二维数组的声明及使用"></a>二维数组的声明及使用</h4><p>在涉及多行多列的数据时，要使用二维数组。</p><p>二维数组的声明方式：</p><pre class=" language-java"><code class="language-java">数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名称 <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span>行<span class="token punctuation">]</span><span class="token punctuation">[</span>列<span class="token punctuation">]</span></code></pre><p>也可以预先设置行数，而不设置列数：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>如上所示，可以先声明一个 3 行未知列数的二维数组，然后分别为 1，2，3 行设置 3，4，5列。</p><p>二维数组与一维数组的比较：</p><ul><li><p><code>一维数组.length</code> 代表一维数组的长度，也就是一维数组中元素的个数</p></li><li><p><code>二维数组.length</code> 代表二维数组的长度，也就是二维数组元素的个数，而由于二维数组是由一维数组所构成的，因此二维数组的元素为一维数组，也就是说 <code>二维数组.length</code> 代表的是二维数组中一维数组的个数,也就是二维数组的行数</p></li><li><p><code>二维数组[0].length</code> 代表的是二维数组第一个元素的长度，也就是二维数组中第一个一维数组的长度，也就是二维数组第一行的列数</p></li></ul><h4 id="二维数组的初始化"><a href="#二维数组的初始化" class="headerlink" title="二维数组的初始化"></a>二维数组的初始化</h4><p>二维数组的初始化本质上为多个一维数组的初始化。</p><pre class=" language-java"><code class="language-java">数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名称 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>元素<span class="token number">1</span><span class="token punctuation">,</span> 元素<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>二维数组的输出要使用 <code>双重 for 循环(外层控制行数，内存控制列数)</code>。</p><p>二维数组的声明及初始化请参考代码 <code>ArrayArrayTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程实现二维数组的声明和使用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayArrayTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.声明一个具有2行3列元素类型为int类型的二维数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印数组中的每个元素</span>        <span class="token comment" spellcheck="true">// 使用外层for循环控制打印的行数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 使用内层for循环控制打印的列数</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 全是0</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.实现二维数组中元素的赋值</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用外层for循环控制打印的行数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 使用内层for循环控制打印的列数</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 使用外层for循环控制打印的行数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 使用内层for循环控制打印的列数</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 2 3   4 5 6</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.二维数组元素的初始化操作</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用外层for循环控制打印的行数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 使用内层for循环控制打印的列数</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11 22 33 44   55 66 77 88</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.考点</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="二维数组的案例"><a href="#二维数组的案例" class="headerlink" title="二维数组的案例"></a>二维数组的案例</h4><p>请用二维数组实现用户输入行数，生成等价行数的 <code>杨辉三角形</code>。</p><p>已知杨辉三角形所有外边数字为 1，其他位置数字为上一行当前列与前一列的和。</p><pre><code>111121133114641</code></pre><p>具体实现请参考代码 <code>ArrayArrayTriangleTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程使用二维数组来实现杨辉三角的生成和遍历 */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayArrayTriangleTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.提示用户输入一个行数并使用变量记录</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个行数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.根据用户输入的行数来声明对应的二维数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.针对二维数组中的每个元素进行初始化，使用双重for循环</span>        <span class="token comment" spellcheck="true">// 使用外层for循环控制二维数组的行下标</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 针对二维数组中的每一行进行内存空间的申请</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 使用内层for循环控制二维数组的列下标</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 当列下标为0或者列下标与当前行的行下标相等时，则对应位置的元素就是1</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> j <span class="token operator">||</span> i <span class="token operator">==</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 否则对应位置的元素就是上一行当前列的元素加上上一行前一列的元素</span>                    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 4.打印最终生成的结果</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Fullstack Academy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fullstack Academy - JavaSE - Basic Operators</title>
      <link href="/2019/03/01/fullstack-academy-javase-module-1-task-3-yun-suan-fu/"/>
      <url>/2019/03/01/fullstack-academy-javase-module-1-task-3-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><h4 id="1-算数运算符的概念"><a href="#1-算数运算符的概念" class="headerlink" title="1. 算数运算符的概念"></a>1. 算数运算符的概念</h4><ul><li><code>+</code> 加法运算符</li><li><code>-</code> 减法运算符</li><li><code>*</code> 乘法运算符</li><li><code>/</code> 除法运算符</li><li><code>%</code> 取余运算符</li></ul><p><strong>注意</strong></p><p><strong>1. 当两个整数相除时，只保留整数部分，丢弃小数部分(言外之意，两个不都是整数的数相除时可以保留小数部分)</strong></p><p>例： <code>5 / 2 = 2</code></p><p>保留小数部分的处理方式一：使用强制类型转换其中一个操作数转换为 double 类型再运算即可(不推荐，因为强制转换类型会造成数据溢出)。</p><p>例：<code>(double)5 / 2</code> 或 <code>5 / (double)2</code> </p><p>保留小数部分的处理方式二：另其中一个操作数乘以 1.0 即可。(推荐)</p><p>例：<code>5 * 1.0 / 2</code></p><p><strong>2. 0不能做除数</strong></p><p>例：<code>5 / 0</code></p><p>算数运算符的实现请参考代码 <code>ArithmeticTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程实现算术运算符的使用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArithmeticTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.声明两个int类型的变量并初始化</span>        <span class="token comment" spellcheck="true">//int ia = 6, ib = 2;       // 表示声明两个int类型的变量ia和ib，不推荐使用</span>        <span class="token keyword">int</span> ia <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 推荐该方式，提高了代码的可读性</span>        <span class="token keyword">int</span> ib <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ia = "</span> <span class="token operator">+</span> ia<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ia = 6</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ib = "</span> <span class="token operator">+</span> ib<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ib = 2</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.使用上述变量实现算术运算符的使用   +  -  *  /  %</span>        <span class="token comment" spellcheck="true">// 表示声明变量ic来记录ia与ib的和</span>        <span class="token keyword">int</span> ic <span class="token operator">=</span> ia <span class="token operator">+</span> ib<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ic = "</span> <span class="token operator">+</span> ic<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ic = 8</span>        <span class="token comment" spellcheck="true">// 其中ia+ib这个整体叫做表达式  ia、ib叫做操作数   +叫做操作符/运算符</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ia <span class="token operator">+</span> ib<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 8</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ia <span class="token operator">-</span> ib<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 4</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ia <span class="token operator">*</span> ib<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 12</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ia <span class="token operator">/</span> ib<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 3</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ia <span class="token operator">%</span> ib<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 0</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.注意事项</span>        <span class="token comment" spellcheck="true">// 3.1 当两个整数相除时结果只保留整数部分，丢弃小数部分</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.2 若希望保留小数部分该如何处理？</span>        <span class="token comment" spellcheck="true">// 处理方式一：使用强制类型转换将其中一个操作数转换为double类型再运算即可</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token number">5</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 2.5</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 2.5</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token number">5</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2.5</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2.0</span>        <span class="token comment" spellcheck="true">// 处理方式二：让其中一个操作数乘以1.0即可（推荐）</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2.5</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5.0</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 2.5   ia.0 错误的表示</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.3 0不能作除数</span>        <span class="token comment" spellcheck="true">//System.out.println(5 / 0); // 编译ok，运行发生java.lang.ArithmeticException(算术异常 记住): / by zero</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">/</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Infinity 无穷</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">/</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN Not a Number </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>对算数运算符的活用，如下例题：</p><p><strong>提示用户输入正整数类型的秒数，拆分后输出时秒分</strong></p><p>代码请参照 <code>ArithmeticTimeTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程使用算术运算符实现秒数的拆分 */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArithmeticTimeTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.提示用户输入一个正整数的秒数并使用变量记录</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个正整数的秒数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.将正整数的秒数拆分为时分秒后并使用变量记录</span>        <span class="token comment" spellcheck="true">// 3666秒 => 1小时1分钟6秒钟</span>        <span class="token comment" spellcheck="true">// 3666 / 3600 = 1 小时     3666 % 3600 = 66 / 60 = 1 分钟     3666 % 60 = 6 秒钟 </span>        <span class="token keyword">int</span> hour <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">3600</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 拆分小时数</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">3600</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 拆分分钟数</span>        <span class="token keyword">int</span> sec <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 拆分秒数</span>        <span class="token comment" spellcheck="true">// 3.打印最终的拆分结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">"秒转换为"</span> <span class="token operator">+</span> hour <span class="token operator">+</span> <span class="token string">"小时"</span> <span class="token operator">+</span> min <span class="token operator">+</span> <span class="token string">"分钟"</span> <span class="token operator">+</span> sec <span class="token operator">+</span> <span class="token string">"秒钟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注意</strong></p><p><strong>关于 <code>+</code> 何时作为字符串连接字符，何时作为加法运算符</strong></p><p>只要+两边的操作数中有一个操作数是字符串类型，则该+就被当做字符串连接符处理，否则当做加法运算符处理</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hour <span class="token operator">+</span> min <span class="token operator">+</span> sec<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 整数8 </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hour <span class="token operator">+</span> min <span class="token operator">+</span> sec <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 字符串8</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hour <span class="token operator">+</span> min <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> sec<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 字符串26</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hour <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> min <span class="token operator">+</span> sec<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 字符串116</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> hour <span class="token operator">+</span> min <span class="token operator">+</span> sec<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 字符串116</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> <span class="token punctuation">(</span>hour <span class="token operator">+</span> min <span class="token operator">+</span> sec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 字符串8</span></code></pre><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><h3 id="条件-三目-运算符"><a href="#条件-三目-运算符" class="headerlink" title="条件(三目)运算符"></a>条件(三目)运算符</h3><p>形式为 <code>条件表达式?表达式1:表达式2</code>。</p><p>流程为：判断表达式是否成立，若成立则执行表达式1，若不成立则执行表达式2。</p><p>例1：使用逻辑运算符和条件运算符判断输入的数字是否为三位数。</p><p>请参考代码 <code>LogicJudgeTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程使用逻辑运算符判断三位数 */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogicJudgeTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.提示用户输入一个正整数并使用变量记录</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个正整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.使用逻辑运算符判断是否为三位数并打印    >= 100   &lt;= 999   &amp;&amp;</span>        <span class="token comment" spellcheck="true">//System.out.println(100 &lt;= num &lt;= 999); // 错误: 二元运算符 '&lt;=' 的操作数类型错误</span>        <span class="token comment" spellcheck="true">// 逻辑运算符主要用于连接多个关系运算符作为最终运算的表达式，用于实现多条件的连接</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">&lt;=</span> num <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;=</span> <span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用三目运算符来判断是否为三位数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">&lt;=</span> num <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;=</span> <span class="token number">999</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token string">"是三位数"</span><span class="token operator">:</span> <span class="token string">"不是三位数"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>例2:使用三目运算符查找输入的两个数字的最大值。</p><p>请参考代码 <code>ThreeEyeTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程使用三目运算符查找最大值 */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreeEyeTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.提示用户输入两个整数并使用变量记录</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入两个整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ia <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ib <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.使用三目运算符找到最大值并打印</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> ia <span class="token operator">></span> ib<span class="token operator">?</span> ia<span class="token operator">:</span> ib<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大值是："</span> <span class="token operator">+</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大值是："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ia <span class="token operator">></span> ib<span class="token operator">?</span> ia<span class="token operator">:</span> ib<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p><code>=</code> 表示赋值运算符，用于将右边的数据赋值给左边的变量，并覆盖变量原来的数值。</p><ul><li>赋值表达式本身也有值，其本身的值就是所赋的值</li></ul><p>例： <code>System.out.println(i = 5)</code> 输出这个表达式的本身，结果为5。</p><ul><li>复合赋值运算符： <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>。</li></ul><p><strong>应注意的是，在结果上来看 <code>ia += 2</code> 和 <code>ia = ia + 2</code> 等价，但实际上并不是如此，比如：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span> ia <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>ia <span class="token operator">=</span> ia <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> </code></pre><p>在运行上述代码时会报错：<code>不兼容的类型: 从int转换到byte可能会有损失</code>，也就是说在做加法运算时，即使是 byte 之间的运算，也会由于编译器优化原理将结果转化为 Int 类型，所以如果想在这种情况下得到结果，则应当执行 <code>ia = (byte)(ia + 2)</code>，但同等情况下 <code>ia += 2</code>则不会报错，因此实际上两者并不等价。</p><p><strong><code>==</code>判断时的注意点： <code>ia == 2</code> 和 <code>2 == ia</code> 在结果上相同，但推荐后者，因为如果少写了一个 <code>=</code> 时可以及时发现，理由是 <code>2 = ia</code> 会报错：错误: 意外的类型。</strong></p><p>复合运算符的实现请参考代码 <code>AssignTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    赋值运算符的使用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AssignTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.声明一个int类型的变量并初始化</span>        <span class="token keyword">int</span> ia <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.打印变量的数值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ia = "</span> <span class="token operator">+</span> ia<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ia = 3</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.简单赋值运算符的使用</span>        <span class="token comment" spellcheck="true">// 表示将数据5赋值给变量ia并且覆盖变量ia原来的数值</span>        ia <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ia = "</span> <span class="token operator">+</span> ia<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ia = 5</span>        <span class="token comment" spellcheck="true">// 下面的代码是在打印表达式的结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> ia <span class="token operator">=</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ia = "</span> <span class="token operator">+</span> ia<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ia = 5</span>        <span class="token keyword">int</span> ib <span class="token operator">=</span> ia <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ia = "</span> <span class="token operator">+</span> ia<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ia = 6</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ib = "</span> <span class="token operator">+</span> ib<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ib = 6</span>        <span class="token keyword">int</span> ic<span class="token punctuation">;</span>        ic <span class="token operator">=</span> ib <span class="token operator">=</span> ia <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ia = "</span> <span class="token operator">+</span> ia<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ia = 8</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ib = "</span> <span class="token operator">+</span> ib<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ib = 8</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ic = "</span> <span class="token operator">+</span> ic<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ic = 8</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.复合赋值运算符的使用</span>        <span class="token comment" spellcheck="true">//ia = ia + 2;  目前推荐使用该方式</span>        ia <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 简化写法，从结果上来看是等价的</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ia = "</span> <span class="token operator">+</span> ia<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ia = 10</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5.笔试考点1</span>        <span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b1 = "</span> <span class="token operator">+</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// b1 = 10</span>        <span class="token comment" spellcheck="true">//b1 = b1 + 2; // 错误: 不兼容的类型: 从int转换到byte可能会有损失         byte + int 相加结果还是int类型</span>        <span class="token comment" spellcheck="true">//b1 = b1 + (byte)2; // 错误: 不兼容的类型: 从int转换到byte可能会有损失   byte + byte 相加结果还是int类型  编译器优化</span>        <span class="token comment" spellcheck="true">//b1 = (byte)(b1 + 2); // 强制类型转换，将int类型转换为byte</span>        b1 <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 真正等价于b1 = (byte)(b1 + 2);</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b1 = "</span> <span class="token operator">+</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// b1 = 12</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 6.笔试考点2</span>        <span class="token comment" spellcheck="true">//ia == 2; - 表示判断变量ia的数值是否等于2</span>        <span class="token comment" spellcheck="true">//2 == ia; - 表示判断2是否等于变量ia的数值，从结果上来说等价，推荐该方式</span>        <span class="token comment" spellcheck="true">//ia = 2;  - 表示将2赋值给变量ia，覆盖变量ia原来的数值</span>        <span class="token comment" spellcheck="true">//2 = ia;  //- 编译报错  错误: 意外的类型</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="移位运算符"><a href="#移位运算符" class="headerlink" title="移位运算符"></a>移位运算符</h3><ul><li>左移运算符 <code>&lt;&lt;</code> </li></ul><p>用于将数据的二进制位向左移动，右边用 0 补充。</p><ul><li>右移运算符  <code>&gt;&gt;</code></li></ul><p>用于将数据的二进制位向右移动，左边用符号位填充，这意味着，如果左边符号位是 1 则用 1 填充，如果左边符号位是 0 ，则用 0 填充。</p><ul><li>逻辑右移运算符 <code>&gt;&gt;&gt;</code></li></ul><p>用于将数据的二进制位向右移动，<strong>左边使用 0 补充。</strong></p><p>移位运算符的运用请参考 <code>MoveBitTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程实现移位运算符的使用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoveBitTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.声明一个byte类型的变量并初始化</span>        <span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.打印变量的数值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b1 = "</span> <span class="token operator">+</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// b1 = 13</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.移位运算符的使用</span>        <span class="token comment" spellcheck="true">// 13的二进制是：... 0000 1101  => 左移1位的结果是：... 0001 1010 => 换算为十进制整数是：26</span>        <span class="token comment" spellcheck="true">//byte b2 = b1 &lt;&lt; 1; // 错误: 不兼容的类型: 从int转换到byte可能会有损失   自动提升为int类型，也就是32位二进制</span>        <span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b1 <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b2 = "</span> <span class="token operator">+</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 26</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1 <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 26    左移1位相当于当前整数的数值*2</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1 <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 52    左移2位相当于当前整数的数值*4</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 13的二进制是：... 0000 1101 => 右移1位的结果是：... 0000 0110 => 换算为十进制整数是：6</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1 <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6     右移1位相当于当前整数的数值/2</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1 <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3     右移2位相当于当前整数的数值/4</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 逻辑右移   对于非负数来说，逻辑右移和右移的效果一致</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1 <span class="token operator">>>></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3  </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注意，在移位时，数据类型也会变为 Int 类型， 因此如果赋值给 byte 类型时会报错，需要强制转型。另外有一个小规律，向左移动一位，相当于当前数值 <code>* 2</code>，向右移动一位相当于当前数值 <code>/ 2</code>。</strong></p><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><ul><li><p>表示按位与运算 &amp; ，按照二进制位进行与运算，同 1 为 1 ，一 0 为 0。</p></li><li><p>按位或运算 | ，按照二进制位进行或运算，一 1 为 1，同 0 为 0。</p></li><li><p>按位取反运算 ～ ，按照二进制位进行取反运算，1 为 0，0 为 1。</p></li><li><p>按异或运算符 ^ ，按照二进制位进行异或运算，同为 0 ，不同为 1。</p></li></ul><p>位运算符的代码实现请参考<code>BitTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程实现位运算符的使用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BitTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.声明两个byte类型的变量并初始化</span>        <span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.打印变量的数值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b1 = "</span> <span class="token operator">+</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// b1 = 11</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b2 = "</span> <span class="token operator">+</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// b2 = 13</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.实现位运算符的使用</span>        <span class="token comment" spellcheck="true">// b1的二进制为： 0000 1011          </span>        <span class="token comment" spellcheck="true">// b2的二进制为： 0000 1101</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> b1 <span class="token operator">&amp;</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 按位与：同1为1，一0为0      按位与后的二进制为：0000 1001  => 转为十进制是：9</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> b1 <span class="token operator">|</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 按位或：一1为1，同0为0      按位或后的二进制为：0000 1111  => 转为十进制是：15</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> b1 <span class="token operator">^</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 按位异或：相同为0，不同为1  按位异或的二进制为：0000 0110  => 转为十进制是：6</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token operator">~</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 按位取反：1为0,0为1         按位取反的二进制为：1111 0100 </span>        <span class="token comment" spellcheck="true">// 二进制1111 0100转为十进制 => 先减1: 1111 0011 => 按位取反：0000 1100 => 转为十进制：12  => 添加负号：-12</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Fullstack Academy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fullstack Academy - JavaSE - Variables and Data types</title>
      <link href="/2019/02/01/fullstack-academy-javase-module-1-task-2-bian-liang-he-shu-ju-lei-xing/"/>
      <url>/2019/02/01/fullstack-academy-javase-module-1-task-2-bian-liang-he-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="1-变量的基本概念"><a href="#1-变量的基本概念" class="headerlink" title="1. 变量的基本概念"></a>1. 变量的基本概念</h4><p>当需要在程序中记录单个数据时，声明一个变量即可。声明变量本身是在内存中申请一个存储单元，由于该存储单元中的数据内容可以发生改变，因此称之为变量。<br><strong>注意：</strong><br>根据存储的内容不同，申请的存储单元的大小也不相同。数据类型对此进行限制。<br>为了下次方便调用，在申请存储单元时声明变量的名称。</p><h4 id="2-变量的声明方式"><a href="#2-变量的声明方式" class="headerlink" title="2. 变量的声明方式"></a>2. 变量的声明方式</h4><p><code>数据类型 变量名(标识符) = 变量初始值(可省略);</code></p><p>参考代码：<code>VarTest.java</code></p><pre class=" language-Java"><code class="language-Java">/*    编程实现变量的声明和使用*/ public class VarTest {    public static void main(String[] args) {        //  初始化一个 integer 声明        int age = 18;        //  打印变量的值，+为连接符 用于将两边的内容拼接起来        System.out.println("your age is" + age);    }}</code></pre><p><strong>变量的几个种类</strong></p><ul><li><p>局部变量 作用范围：从声明开始一直到方法体结束</p></li><li><p>块变量 作用范围：从声明开始一直到当前语句块结束</p></li></ul><h4 id="3-标识符的命名规则"><a href="#3-标识符的命名规则" class="headerlink" title="3. 标识符的命名规则"></a>3. 标识符的命名规则</h4><ul><li><p>由数字，字母，下划线及 $ 构成，但请记住，不可以用数字开头。能用字母命名的标识符尽量用字母命名。</p></li><li><p>不能使用 java 关键字。</p></li><li><p>区分大小写。长度没有限制，但由于理解性原则不宜过长命名。</p></li></ul><h4 id="4-变量输入输出"><a href="#4-变量输入输出" class="headerlink" title="4. 变量输入输出"></a>4. 变量输入输出</h4><p>介绍了 Scanner 的导入和调用。<br>案例：实现将用户输入的姓名和年龄输出。<br>参考代码：<code>VarIOTest.java</code></p><pre class=" language-Java"><code class="language-Java">/*    realize the input and out put*/// 导入 Scannerimport java.util.Scanner;public class VarIOTest {    public static void main(String[] args) {        // 1. 声明两个变量用于记录年龄和信息(申请内存空间)        String name;        int age;        // 2. 提示用户从键盘输入姓名和年龄并存入变量中        System.out.println("请输入姓名和年龄：");        // 创建一个扫描器来扫描键盘输入的内容，其中 system.in 为键盘输入内容        Scanner sc = new Scanner(System.in);        // 通过分别调用定义好的 sc 扫描器扫描用户输入的姓名和年龄并分别放入 name 和 age 中        name = sc.next();        age = sc.nextInt();        // 3. 打印变量的数值        System.out.println("您的名字为" + name);        System.out.println("您的年龄为" + age);    }}</code></pre><p><code>VarIOTest.java</code> 实现了基本的功能，<strong>但不够优化</strong>。主要体现在如下两方面。</p><ul><li>变量随声明随使用原则</li></ul><p>姓名和年龄声明之后并没有立刻使用，占用了内存。</p><pre class=" language-Java"><code class="language-Java">String name;int age;</code></pre><ul><li>尽可能减少重复的代码</li></ul><p>如下输出可以同时进行。</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您的名字为"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您的年龄为"</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>优化后的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VarIOTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入姓名和年龄："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您的名字为"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", 您的年龄为"</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="5-官方库的使用"><a href="#5-官方库的使用" class="headerlink" title="5. 官方库的使用"></a>5. 官方库的使用</h4><p>JDK 中有大量的 API 类，是 Java 系统带来的工具库，是 Java 官方程序员的技术积累，可以帮助我们简化编程，提高开发效率。<br>具体的API类功能可以参阅 Java 的参考手册。</p><p>详情可参考我的 Github 项目中的 <code>JDK 11 API中文帮助文档.CHM</code> 文件。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="1-数据类型的分类"><a href="#1-数据类型的分类" class="headerlink" title="1. 数据类型的分类"></a>1. 数据类型的分类</h4><h5 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h5><p>byet, short, int, long, float, double, boolean, char</p><h5 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h5><p>数组， 类， 接口， 枚举， 标注</p><h4 id="2-常用进制"><a href="#2-常用进制" class="headerlink" title="2. 常用进制"></a>2. 常用进制</h4><ul><li><p>生活中采用十进制，十进制的特点为逢十进一，十进制的权重为10^0, 10^1, 10^2…</p></li><li><p>计算机世界采用二进制，二进制的特点为逢二进一，二进制的权重为2^0, 2^1, 2^2…</p></li></ul><p>二进制中的最高位(最左位)代表符号位，若为 0 则表示非负数，为 1 则表示负数。</p><ul><li>为了简化二进制出现了八进制和十六进制。</li></ul><h4 id="3-进制转化"><a href="#3-进制转化" class="headerlink" title="3. 进制转化"></a>3. 进制转化</h4><h5 id="正十进制转化二进制"><a href="#正十进制转化二进制" class="headerlink" title="正十进制转化二进制"></a>正十进制转化二进制</h5><p><strong>a. 除 2 取余法</strong><br>使用十进制整数不断除以 2 取出余数，直到商为 0 时将余数逆序排序。<br>例如十进制45的二进制表现为10 1101，在java中区分数列为二进制还是十进制时要加入前缀，比如<code>0b101101</code>为二进制。(0开头为八进制，0x开头为十六进制)<br><strong>注意，10 1101 中的最高位并不是最左边的1，而是 64 位系统将前面的 0 省略掉了，具体可以借用计算器计算。</strong></p><p><strong>b. 拆分法</strong><br>将十进制整数拆分为若干个二进制权重的和，有该权重的下面写 1 否则写 0。<br>例：将十进制 <code>45</code> 转化为二进制。</p><pre><code>Step 145 = 32 + 8 + 4 + 1Step 2 128 64 32 16 8 4 2 10   0  1  0  1 1 0 1Result0010 1101</code></pre><h5 id="正二进制转化十进制"><a href="#正二进制转化十进制" class="headerlink" title="正二进制转化十进制"></a>正二进制转化十进制</h5><p><strong>加权法</strong><br>将二进制各位的权重进行十进制的转化并加和。<br>例：将二进制 <code>10 1101</code> 转化为十进制。</p><pre><code>10 11011*2^5 + 0*2^4 + 1*2^3 + 1*2^2 + 0*2^1 + 1*2^0 = 32 + 8 + 4 + 1 = 45</code></pre><h5 id="负十进制转化为二进制"><a href="#负十进制转化为二进制" class="headerlink" title="负十进制转化为二进制"></a>负十进制转化为二进制</h5><p>例：将负十进制 <code>-45</code> 转化为二进制。</p><pre><code>步骤一：将 -45 的绝对值转化为二进制|-45| = 4545 的二进制为: 0010 1101步骤二：按位取反(0 变成 1，1 变成 0)结果为：1101 0010步骤三：在步骤二的基础上末位加一结果为：1101 0011检验：-45 + 45 = 0  0010 1101  1101 0011 +--------------1 0000 0000最先头的 1 高位溢出无效，所以结果为 0，验证成功。</code></pre><h5 id="负二进制转化为十进制"><a href="#负二进制转化为十进制" class="headerlink" title="负二进制转化为十进制"></a>负二进制转化为十进制</h5><p>例：将负二进制 <code>1101 0011</code> 转化为十进制。</p><pre><code>步骤一：二进制最后位减一1101 00110000 0001 -------------1101 0010步骤二：按位取反1101 0010      取反---------0010 1101步骤三：转为十进制0010 11010*2^7 + 0*2^6 + 1*2^5 + 0*2^4 + 1*2^3 + 1*2^2 + 0*2^1 + 1*2^0 = 32 + 8 + 4 + 1 = 45步骤四；取反45 👉 -45</code></pre><h4 id="4-单个字节所能表示的整数范围"><a href="#4-单个字节所能表示的整数范围" class="headerlink" title="4. 单个字节所能表示的整数范围"></a>4. 单个字节所能表示的整数范围</h4><p>在计算机中单个字节表示八位二进制位，其中最高位代表符号位，0 代表非负数，1 代表负数，所以具体能表示的范围如下：</p><ul><li><p>非负数表示范围：0000 0000 ～ 0111 1111 👉 0 ～ 127(0 ~ 2^7 -1)</p></li><li><p>负数表示范围： 1000 000 ～ 1111 1111 👉 -128 ～ -1(-2^7 ~ -2^0)</p></li></ul><p>综上所述，单个字节所能表示的整数范围为 -128 ～ 127。</p><h4 id="5-整数类型的概念"><a href="#5-整数类型的概念" class="headerlink" title="5. 整数类型的概念"></a>5. 整数类型的概念</h4><p>Java 语言中描述整数数据的类型有：Byte， short， int， long。他们分别所占字节和表示范围如下所示：</p><pre class=" language-Java"><code class="language-Java">byte: 占用一个字节，表示范围 -2^7 ~ 2^7 -1short: 占用两个字节，表示范围 -2^15 ~ 2^15 -1int: 占用四个字节，表示范围 -2^31 ~ 2^31 -1long: 占用八个字节，表示范围 ^2^63 ~ 2^63-1</code></pre><p>日常开发中推荐使用 <code>int</code> 类型。在 java 中直接输入整数也默认为 int 类型，但 Java 自身会对这个数进行判断，如果这个数在小与 Int 的类型的表示范围内，则可以以指定类型表示，但实质上还是 Int 类型。因此在定义 byte 等的时候，如果超出其表示范围则会提示<code>从 int 转换到 byte 可能会有损失</code>。</p><p><strong>注意，long 的定义不能以没有超出表示范围为理由，直接以 long 定义一个超出 int 类型的整数时，会报错：<code>整数太大</code>, 因此在这种情况下应在要定义的整数后加 <code>f 或 F</code> （若描述比 long 类型还大的数据则使用 java.math.BigInteger 类型）。</strong></p><p>关于表示范围的直观体现参考代码 <code>IntTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程实现整数类型的使用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.声明一个 byte 类型的变量并初始化</span>        <span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//byte b1 = 250;     // 错误: 不兼容的类型: 从 int 转换到 byte 可能会有损失  250 这样直接写出的整数数据叫做直接量/常量/字面值 默认为 int 类型 </span>        <span class="token comment" spellcheck="true">// 2.打印变量的数值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b1 = "</span> <span class="token operator">+</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// b1 = 25</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.声明一个 short 类型的变量并初始化</span>        <span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">250</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//short s1 = 250250;  // 错误：不兼容的类型：从 int 转换到 short 可能会有损失</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1 = "</span> <span class="token operator">+</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// s1 = 250</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.声明一个 int 类型的变量并初始化</span>        <span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">250250</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//int i1 = 2502505006; // 错误: 整数太大   默认为 int 类型，这个数据自身已经出错，无法表示</span>        <span class="token comment" spellcheck="true">//int i1 = 2502505006L;  // 错误：不兼容的类型：从 long 转换到 int 可能会有损失</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i1 = "</span> <span class="token operator">+</span> i1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// i1 = 250250</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5.声明一个 long 类型的变量并初始化，若描述比 long 类型还大的数据则使用 java.math.BigInteger 类型</span>        <span class="token keyword">long</span> g1 <span class="token operator">=</span> 2502505006L<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"g1 = "</span> <span class="token operator">+</span> g1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// g1 = 2502505006</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>有时会出现如下问题：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 6.请问下面的代码是否有错误？若有请指出并说明原因</span><span class="token comment" spellcheck="true">//int i2 = 25;</span><span class="token comment" spellcheck="true">//byte b2 = i2;  // 错误: 不兼容的类型: 从 int 转换到 byte 可能会有损失</span><span class="token comment" spellcheck="true">//System.out.println("b2 = " + b2);</span></code></pre><p><strong>注意：不可以将表示范围大的变量赋值给表示范围小的变量，虽然在本题目中 25 在 byte 类型的表示范围中，但 int 是变量，将来有可能保存大于 byte 类型表示范围的值，因此会报错。</strong></p><h4 id="6-浮点类型的概念"><a href="#6-浮点类型的概念" class="headerlink" title="6. 浮点类型的概念"></a>6. 浮点类型的概念</h4><p>Java中用于描述小树数据的类型称之为浮点类型，包括 <code>float类型</code> 和 <code>double类型</code>，推荐使用 <code>double类型</code>。</p><ul><li><p>float 类型 占用四个字节，叫做单精度浮点数，可以表示 7 位有效数字，范围：-3.403E38 ～ 3.403E38</p></li><li><p>double 类型 占用八个字节，叫做双精度浮点数，可以表示 15 位有效数字，范围：-1.798E308 ～ 1.798E308</p></li><li><p>Java 程序中直接写出的小数数据叫做直接量，默认为 double 类型(整数默认为 int 类型)， 若希望表达 float 类型的话，需要在直接量后加上 <code>f 或 F</code>    </p></li></ul><p>具体代码实现请参考 <code>DoubleTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程实现浮点类型的使用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoubleTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.声明一个float类型的变量并初始化</span>        <span class="token comment" spellcheck="true">//float f1 = 3.1415926;   // 错误: 不兼容的类型: 从double转换到float可能会有损失   小数数据叫做直接量，默认为double类型</span>        <span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token number">3.1415926f</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.打印变量的数值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"f1 = "</span> <span class="token operator">+</span> f1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// f1 = 3.1415925     一般是7位有效数字</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.声明一个double类型的变量并初始化</span>        <span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d1 = "</span> <span class="token operator">+</span> d1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// d1 = 3.1415926     一般是15位有效数字</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.笔试考点</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 0.30000000000000004  运算时可能会有误差，若希望实现精确运算则借助java.math.BigDecimal类型 </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过如上代码可知， float有效位少，所以不精确，double较为精确<strong>但在涉及精确计算时要借助 <code>java.math.BigDecimal</code> 库</strong>。</p><h4 id="6-布尔类型的概念"><a href="#6-布尔类型的概念" class="headerlink" title="6. 布尔类型的概念"></a>6. 布尔类型的概念</h4><p>用于描述真假信息，数值只有 false 和 true。<br>Java 官方并没有给出关于布尔类型占用字节数的描述，通常认为占用一个字节。但其实由于 boolen 的值只有 false 和 true 因此即使只占用一个 byte 也是足够的。</p><p>实现代码请参照 <code>BooleanTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程实现布尔类型的使用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BooleanTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.声明一个boolean类型的变量并初始化</span>        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.打印变量的数值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b1 = "</span> <span class="token operator">+</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// b1 = true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.修改变量b1的数值   = 赋值运算符，用于将=右边的数据赋值给=左边的变量，覆盖变量中原来的数值</span>        b1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b1 = "</span> <span class="token operator">+</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// b1 = false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//b1 = 1; // 错误: 不兼容的类型: int无法转换为boolean</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="7-字符类型的概念"><a href="#7-字符类型的概念" class="headerlink" title="7. 字符类型的概念"></a>7. 字符类型的概念</h4><p>用于描述单个字符的类型叫做字符类型，也叫做 char 类型。例如：’a’ 等。<br>char 类型在内存空间中占用 2 个字节，且没有符号位，表示范围： 0 ～ 65535，由于现实生活中很少有数据能被单个字符描述，因此以后的开发中更多的使用由多个字符串起来组成的字符串，使用 String 类型加以描述。</p><ul><li>关于 ASCII 码</li></ul><p>计算机只能识别由 0 和 1 组成的二进制序列，’a’ 这样的字符对于计算机来讲仅仅是图案而已，因此无法直接在计算机中存储，但有存储的需求，为了使得该数据能够存储起来就给定字符一个编号，只要将编号存储起来就相当于将 ‘a’ 这样的字符串存储起来，问题就解决了，解决这个问题的编号叫做 ASCII 码。</p><p>要求掌握的常用 ASCII 码有：’0’:48 ‘A’:65 ‘a’:97 空格:32 换行符:10</p><ul><li><p>关于 Unicode</p><p>ASCII 码可表示的字符有限，有时需要引入 Unicode 码，Unicode 是世界通用的定长字符集，所有的字符都是十六位。在代码中可以参考到 Unicode 编码的实现。</p><ul><li>关于转义字符</li></ul><p>特殊字符的使用中，比如 <code>&quot;&quot;</code> 有两个作用，作用一是作为字符串开头和结尾的标志，作用二则作为文章中的双引号本身来使用，当需要 <code>&quot;&quot;</code> 作为作用二来使用时，则需要用到转义字符 <code>\</code> 。 主要的转义字符有四个，分别为： <code>\&quot;</code>, <code>\&#39;</code>, <code>\t(制表符)</code>, <code>\n(换行符)</code>。</p></li></ul><p>实现代码请参照 <code>CharTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.声明一个char类型的变量并初始化</span>        <span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.打印变量的数值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c1 = "</span> <span class="token operator">+</span> c1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// c1 = a   </span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对应的编号是："</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 表示将char类型的c1强制转换为int类型并打印   97 </span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.声明一个char类型的变量并初始化</span>        <span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token number">98</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c2 = "</span> <span class="token operator">+</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// c2 = b   </span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对应的编号是："</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 98</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.使用Unicode字符集来表示一下我的名字   奇点  对应的编号是： \u5947\u70b9</span>        <span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token string">'\u5947'</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> c4 <span class="token operator">=</span> <span class="token string">'\u70b9'</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终的结果是："</span> <span class="token operator">+</span> c3 <span class="token operator">+</span> c4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 奇点</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.特殊字符的使用   双引号本身有2个含义：a.字符串的开头和结尾标志    b.双引号自身    \ 转义就是转换原有的含义</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我想过过\"过过过过的生活！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//  \"  - "</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我想过过\'过过过过的生活！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我想过过\\过过过过的生活！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我想过过\t过过过过的生活！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我想过过\n过过过过的生活！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过代码可知，通过 char 定义的变量在输出时将输出 char 类型。如果希望输出 ASCII 编码则需要强制转化为 Int 类型后再输出。反之，定义 char 类型时直接输入 ASCII 编码也同样可以定义变量。</p><h4 id="8-基本数据类型之间的转换"><a href="#8-基本数据类型之间的转换" class="headerlink" title="8. 基本数据类型之间的转换"></a>8. 基本数据类型之间的转换</h4><p>数据类型转换分为<strong>自动类型转换</strong>和<strong>强制类型转换</strong></p><ul><li>自动类型转换</li></ul><p>从小类型到大类型的转换。</p><pre><code>byte short int long float double     char</code></pre><p>所谓小类型和大类型指的是类型的表示范围，比如 long 占用 8 个字节的内存，但对于 float 来说它是小类型，原因就在于 long 的表示范围为 2^63 级别，而 float 的表示范围为 10^38 级别。</p><ul><li>强制类型转换</li></ul><p>从大类型到小类型的转换。</p><p>强制类型转换的语法格式：</p><p>目标类型 变量名 = (目标类型)源类型变量名</p><p><strong>注意：强制转换有内存溢出的风险</strong></p><p>数据类型的转换方式如代码 <code>TransformTest.java</code> 所示</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    编程实现基本数据类型之间转换的使用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransformTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.声明两个变量并初始化</span>        <span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.打印变量的数值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b1 = "</span> <span class="token operator">+</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// b1 = 10</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1 = "</span> <span class="token operator">+</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// s1 = 20</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.实现自动类型转换的使用</span>        <span class="token comment" spellcheck="true">// 表示将变量b1的数值赋值给变量s1，并覆盖变量s1中原来的数值，相当于从byte类型到short类型的转换，小到大  自动转换</span>        s1 <span class="token operator">=</span> b1<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b1 = "</span> <span class="token operator">+</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// b1 = 10</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1 = "</span> <span class="token operator">+</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// s1 = 10</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.实现强制类型转换的使用</span>        <span class="token comment" spellcheck="true">// 表示将变量s1的数值赋值给变量b1，并覆盖变量b1中原来的数值，相当于从short类型到byte类型的转换，大到小  强制转换</span>        <span class="token comment" spellcheck="true">//b1 = s1;   // 错误: 不兼容的类型: 从short转换到byte可能会有损失</span>        s1 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 故意加该行代码      128:0000 0000 1000 0000  => 1000 0000 => 0111 1111 => 1000 0000 => 128 => -128</span>        b1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>s1<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b1 = "</span> <span class="token operator">+</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// b1 = 10   -128 </span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1 = "</span> <span class="token operator">+</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// s1 = 10   128</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如代码所示，当定义 short 类型为 128 并赋值给 byte 类型时，由于 byte 类型的表示范围最大为 127 且占用 1 个字节，而 short 类型占用两个字节，转换为二进制也就是 <code>0000 0000 1000 0000</code>,因此 byte 类型只保存 <code>1000 0000</code>的部分，也就是编译器所输出的结果 <code>-128</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Fullstack Academy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac配置java开发环境</title>
      <link href="/2019/01/23/mac-pei-zhi-java-kai-fa-huan-jing/"/>
      <url>/2019/01/23/mac-pei-zhi-java-kai-fa-huan-jing/</url>
      
        <content type="html"><![CDATA[<p>本文简单介绍在Mac OS环境下的java开发环境搭建</p><h3 id="JDK下载及安装"><a href="#JDK下载及安装" class="headerlink" title="JDK下载及安装"></a>JDK下载及安装</h3><p>打开<a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">Oracle</a>官网下载JDK</p><p>本文下载的是java SE 8版本</p><p><img src="https://i.loli.net/2020/11/29/yGD1uCwQNaq7ZLo.png" alt="下载页面"></p><p>选择<code>JDK Download</code>并选择相应系统进行下载</p><p>本文介绍Mac OS系统下的环境配置因此选择macOS x64</p><p><img src="https://i.loli.net/2020/11/29/6SUpIRiOPdVjMTc.png" alt="版本选择"></p><p>下载完成后直接安装一路next直到完成</p><h3 id="查看JDK地址"><a href="#查看JDK地址" class="headerlink" title="查看JDK地址"></a>查看JDK地址</h3><p>我们可以根据以下命令查看JDK地址</p><pre><code>$ /usr/libexec/java_home -V</code></pre><p><img src="https://i.loli.net/2020/11/29/jE6lH3agcoCwksB.png" alt="jdk地址"></p><p>记好JDK的安装路径后面会用到</p><pre><code>/Library/Java/JavaVirtualMachines/jdk-11.jdk/Contents/Home</code></pre><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><h4 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h4><p>打开终端Terminal</p><ul><li><p>如果是第一次配置环境变量, 通过以下命令创建一个名为<code>.bash_profile</code>隐藏配置文件</p><pre><code>$ touch .bash_profile</code></pre></li><li><p>如果不是第一次配置环境变量, 使用命令打开配置文件</p><pre><code>$ open -e .bash_profile</code></pre></li></ul><h4 id="填写配置文件"><a href="#填写配置文件" class="headerlink" title="填写配置文件"></a>填写配置文件</h4><p>在配置文件中输入以下的内容</p><pre><code>JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/HomePATH=$JAVA_HOME/bin:$PATH:.CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:.export JAVA_HOMEexport PATHexport CLASSPATH</code></pre><p>保存并关闭配置文件</p><blockquote><p>注意: JAVA_HOME的值是上文提到的JDK安装路径</p><ul><li>如果是通过vi打开的<ul><li>按下<code>i</code>进入输入模式</li><li>输入内容后按<code>esc</code>进入保存模式</li><li>输入<code>:wq!</code>保存</li></ul></li><li>如果是通过文本打开的<ul><li>输入配置内容</li><li>通过<code>command + S</code>保存并退出</li></ul></li></ul></blockquote><h4 id="生效配置文件"><a href="#生效配置文件" class="headerlink" title="生效配置文件"></a>生效配置文件</h4><p>通过以下命令使配置文件生效</p><pre><code>$ source .bash_profile</code></pre><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>通过以下命令验证环境配置是否成功</p><pre class=" language-$"><code class="language-$">$ echo $JAVA_HOME</code></pre><p>如果输出jdk的路径则表示配置成功</p><p><img src="https://i.loli.net/2020/11/29/3w6ms1UrPCYlf5g.png" alt="jdk环境变量配置成功"></p>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在eclipse上配置Tomcat</title>
      <link href="/2019/01/10/zai-eclipse-shang-pei-zhi-tomcat/"/>
      <url>/2019/01/10/zai-eclipse-shang-pei-zhi-tomcat/</url>
      
        <content type="html"><![CDATA[<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><blockquote><p>首先确认eclipse是否支持web project, 如果你不确定你是否可以建立Dynamic Web Project, 你可以通过点击File &gt; New &gt; Other, 然后输入关键词搜索来确定, 搜索不到则需要安装插件.</p></blockquote><p>点击Help中的<code>Install New Software...</code></p><p><img src="https://i.loli.net/2020/11/29/7gnoph3BCWuQO2S.png" alt=""></p><p>点击<code>Add</code>按钮.名字不重要, 我的eclipse版本是mars</p><p><img src="https://i.loli.net/2020/11/29/hmo2dpESwKfxGJ4.png" alt=""></p><p>勾选最后一个选项, 其他不用改, 一直点下一步就好</p><p>更新需要一点时间, 图标会有显示, 页面右下角也会有显示.更新完成后会提示重启, 点确定</p><p><img src="https://i.loli.net/2020/11/29/OyQKDfqo4hES3Ug.png" alt=""></p><h3 id="下载Tomcat"><a href="#下载Tomcat" class="headerlink" title="下载Tomcat"></a>下载Tomcat</h3><p>通过<a href="https://Tomcat.apache.org/download-80.cgi0" target="_blank" rel="noopener">官方网站</a>下载.(下载文件：mac下载 zip 和 tar.gz 都可)</p><p>安装：压缩之后直接拷贝到资源库中.(在Machintosh HD&gt;资源库&gt;新建Tomcat文件夹, 并将<code>apache-Tomcat-x.0.90</code>中的内容复制到Tomcat中)</p><h3 id="启动和关闭Tomcat"><a href="#启动和关闭Tomcat" class="headerlink" title="启动和关闭Tomcat"></a>启动和关闭Tomcat</h3><h4 id="启动Tomcat"><a href="#启动Tomcat" class="headerlink" title="启动Tomcat"></a>启动Tomcat</h4><p>进入Tomcat的bin目录</p><pre><code>$ cd /Library/Tomcat/bin</code></pre><p>授权bin目录下的所有操作</p><pre><code>$ sudo chmod 755 *.sh</code></pre><p>开启Tomcat</p><pre><code>$ sudo sh ./startup.sh</code></pre><p>在浏览器地址栏输入<code>http://localhost:8080</code>显示如下界面代表开启成功</p><p><img src="https://i.loli.net/2020/11/29/9krs67gmjUHunWo.jpg" alt=""></p><h4 id="关闭Tomcat"><a href="#关闭Tomcat" class="headerlink" title="关闭Tomcat"></a>关闭Tomcat</h4><pre><code>$ sh ./shutdown.sh</code></pre><h3 id="配置Tomcat在eclipse的插件"><a href="#配置Tomcat在eclipse的插件" class="headerlink" title="配置Tomcat在eclipse的插件"></a>配置Tomcat在eclipse的插件</h3><h4 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h4><p>下载<a href="https://sourceforge.net/projects/Tomcatplugin/" target="_blank" rel="noopener">插件</a>并解压</p><h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><p>点击Help下的<code>install new software</code></p><p><img src="https://i.loli.net/2020/11/29/q4sfDmlxop6Z8vW.jpg" alt=""></p><p>按顺序点击<code>add&gt;local&gt;</code>选择刚才解压的文件夹, name栏自行随意填写</p><p>一路next, 完成以后重启Eclipse. 完成后会在<code>Eclipse&gt;preferences</code>下看到Tomcat</p><p><img src="https://i.loli.net/2020/11/29/5oE3g81Cz4BGenS.jpg" alt=""></p><p>选择<code>Tomcat version</code>并填写Tomcat home的选项(/Library/Tomcat), 点击<code>apply and close</code>按钮</p><h3 id="配置server与Tomcat"><a href="#配置server与Tomcat" class="headerlink" title="配置server与Tomcat"></a>配置server与Tomcat</h3><p>按顺序点击<code>Server&gt;Runtime Environments&gt;Add</code></p><p><img src="https://i.loli.net/2020/11/29/ZdvyEzj4Qr8RfXt.jpg" alt=""></p><p>选择Tomcat的版本</p><p><img src="https://i.loli.net/2020/11/29/3CRJGhjX5ziBeKP.jpg" alt=""></p><p>点击<code>next</code>并填写<code>Tomcat installation directory</code>(Tomcat安装路径)</p><p><img src="https://i.loli.net/2020/11/29/rlXnDchawM5S1J4.jpg" alt=""></p><p>点击<code>finish</code>即可添加成功</p>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Apache Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fullstack Academy - JavaSE - Basic Knowledge</title>
      <link href="/2019/01/01/fullstack-academy-javase-module-1-task-1-ji-ben-gai-nian/"/>
      <url>/2019/01/01/fullstack-academy-javase-module-1-task-1-ji-ben-gai-nian/</url>
      
        <content type="html"><![CDATA[<h3 id="计算机的基本概念"><a href="#计算机的基本概念" class="headerlink" title="计算机的基本概念"></a>计算机的基本概念</h3><p>计算机概念: 用于高级计算，使用广泛的<strong>设备</strong>，由硬件和软件组成.</p><ul><li>硬件: 客观存在的相关设备</li><li>软件: 用于控制各种硬件设备完成各种功能</li></ul><h4 id="常见的主要硬件"><a href="#常见的主要硬件" class="headerlink" title="常见的主要硬件"></a>常见的主要硬件</h4><p>计算机硬件主要包括:  中央处理器(CPU)，内存，硬盘，输入输出设备，主板，机箱和电源.</p><h5 id="主要硬件的详解"><a href="#主要硬件的详解" class="headerlink" title="主要硬件的详解"></a>主要硬件的详解</h5><ul><li><p>CPU:  中央处理器(Central Processing Unit)</p><ul><li><p>计算机的核心部件，类似于人的大脑</p></li><li><p>计算机的运算核心和控制中心，所有运算由CPU完成 </p></li><li><p>解释计算机指令以及处理计算机软件中的数据</p></li></ul></li><li><p>内存: 计算机的存储部件，也被称为内存储器(memory)</p><ul><li>用于<strong>暂时</strong>CPU中的运算数据，以及与硬盘等外部存储器交换的数据</li><li>CPU可直接访问内存的数据，且效率较高 </li><li>容量小且不能永久储存，一旦断电会造成数据丢失</li></ul></li><li><p>硬盘: 计算机中的存储部件</p><ul><li><p>在内存中点击<code>Ctrl + S</code>后数据进入硬盘</p></li><li><p>永久储存，容量大且断电不丢失</p></li><li><p>CPU不能直接访问，需先加载到内存中</p></li></ul></li></ul><h4 id="主要软件的详解"><a href="#主要软件的详解" class="headerlink" title="主要软件的详解"></a>主要软件的详解</h4><p>计算机软件分为<strong>系统软件</strong>和<strong>应用软件</strong>，系统软件是操作系统，是其他软件的基础.</p><p>主流操作系统: Windows/Unix/Linux/IOS/Android</p><h3 id="计算机的体系结构"><a href="#计算机的体系结构" class="headerlink" title="计算机的体系结构"></a>计算机的体系结构</h3><p>自上而下: 硬件👉操作系统内核(OS kernel)👉操作系统外壳(OS shell包括GUI/命令等)👉应用程序</p><h3 id="计算机语言的发展"><a href="#计算机语言的发展" class="headerlink" title="计算机语言的发展"></a>计算机语言的发展</h3><ul><li><p>第一代语言 机器语言</p><ul><li>二进制代码形式存在，最开始使用穿孔卡片</li></ul></li><li><p>第二代语言 汇编语言</p><ul><li>使用助记符表示一条机器命令，如ADD，SUB等</li></ul></li><li><p>高级语言</p><ul><li>Java等</li></ul></li></ul><h3 id="Java的主要版本"><a href="#Java的主要版本" class="headerlink" title="Java的主要版本"></a>Java的主要版本</h3><ul><li><p>Java SE平台标准版</p><ul><li><p>平台的基础</p></li><li><p>包含了运行Java所需的基础环境和核心类库</p></li><li><p>定义了基于桌面应用这样的基础类库</p></li><li><p>可以编写桌面应用</p></li></ul></li><li><p>Java EE平台企业版</p><ul><li>基于SE构建企业级应用(企业级应用: 为商业组织，大型企业而创建的应用系统)</li></ul></li><li><p>Java ME平台微型版</p><ul><li>为机顶盒，移动电话和PDA等嵌入式消费电子设备提供Java解决方案</li></ul></li></ul><h3 id="JDK的相关文件"><a href="#JDK的相关文件" class="headerlink" title="JDK的相关文件"></a>JDK的相关文件</h3><ul><li><p>bin: JDK工具命令</p></li><li><p>conf: 配置文件</p></li><li><p>include: 平台头文件</p></li><li><p>jmods: JKD模块</p></li><li><p>legal: 授权文档</p></li><li><p>lib: 补充jar包和源代码</p></li><li><p>其他</p></li><li><p>JDK: 开发工具包 开发人员使用 <code>JDK = 编译器等开发工具 + JRE</code></p></li><li><p>JRE: 提供了运行Java应用程序所必须的软件环境 用户使用 <code>JRE = 运行类库 + Java虚拟机(JVM)</code></p></li><li><p>JVM: 中间解释器，由于JVM的存在实现跨平台</p></li><li><p>javac.exe: 编译器，用于将高级Java源代码翻译成字节码文件</p></li><li><p>java.exe: 解释器，用于启动JVM对字节码文件进行解释并执行</p></li></ul><h3 id="常用开发工具"><a href="#常用开发工具" class="headerlink" title="常用开发工具"></a>常用开发工具</h3><ul><li><p>文本编译器(TE，Text Editor)</p><ul><li><p>记事本</p></li><li><p>Notepad++</p></li></ul></li><li><p>集成开发环境(IDE, Integrated Development Environment)</p><ul><li><p>IDEA</p></li><li><p>MyEclipse </p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Fullstack Academy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Github Page 搭建个人博客</title>
      <link href="/2019/01/01/hexo-github-page-da-jian-ge-ren-bo-ke/"/>
      <url>/2019/01/01/hexo-github-page-da-jian-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="liruoyu.tech">My Blog</a>! This is my very first post. This Blog will show you how to <strong>Setup a Blog</strong> by <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> and <a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a>!</p><h3 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是Hexo？</h3><blockquote><p>Hexo是一个快速、简洁且高效的博客框架Hexo使用Markdown(或其他渲染引擎)解析文章, 在几秒内, 即可利用靓丽的主题生成静态网页<br>Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info.<br>如果你有关于任何Hexo的疑问, 也可以在<a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">问题定位</a>查询答案或者在<a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>询问作者</p></blockquote><h3 id="基础环境整备"><a href="#基础环境整备" class="headerlink" title="基础环境整备"></a>基础环境整备</h3><p>因为Hexo是基于Node.js驱动的一款博客框架, 因此首先需要安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">NodeJS</a></p><p>安装完成后为了方便部署博客到 Github 上还需要安装<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></p><p>这一步骤比较简单, 在此不多赘述</p><p>安装后输入相应命令验证是否安装成功, 如果成功会出现相应的版本号</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> version$ node -v$ <span class="token function">npm</span> -v</code></pre><h3 id="安装并调试Hexo"><a href="#安装并调试Hexo" class="headerlink" title="安装并调试Hexo"></a>安装并调试Hexo</h3><p>在命令行输入以下命令</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>安装后再依次执行以下命令建立博客必须的文件环境</p><pre class=" language-bash"><code class="language-bash">$ hexo init myBlog$ <span class="token function">cd</span> myBlog$ <span class="token function">npm</span> <span class="token function">install</span></code></pre><p>如果上述的命令在执行过程中都没有报错的话, 执行以下命令</p><pre class=" language-bash"><code class="language-bash">$ hexo s</code></pre><p>在浏览器中访问<code>http://localhost:4000</code>就可以预览效果了</p><h3 id="部署到Github-Pages上"><a href="#部署到Github-Pages上" class="headerlink" title="部署到Github Pages上"></a>部署到Github Pages上</h3><h4 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h4><blockquote><p>前提：已拥有Github账户</p></blockquote><p>点击<code>Start project</code>或<code>new repository</code> 创建一个新的仓库</p><p><strong>注意: Github仅能使用一个同名仓库的代码托管一个静态站点</strong></p><p><img src="https://i.loli.net/2020/11/29/9UkKH6Mm32eALwa.png" alt="github命名.png"></p><h4 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH Key"></a>配置SSH Key</h4><p>使用git配置SSH key, 为部署本地博客到Github做准备</p><p>在命令行执行以下命令确认是否生成过<code>SSH Key</code> </p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> ~/.ssh</code></pre><p>如果没报错则说明以前生成过</p><ul><li><p>生成过</p><p>执行以下命令查看本机生成过的SSH Key</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cat</span> ~/.ssh/id_rsa.pub</code></pre></li><li><p>未生成过</p><p>执行以下命令全局配置本地账户</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> config --global user.name <span class="token string">"用户名"</span>$ <span class="token function">git</span> config --global user.email <span class="token string">"邮箱地址"</span></code></pre><p>生成密钥SSH key</p><pre class=" language-bash"><code class="language-bash">$ ssh-keygen -t rsa -C <span class="token string">'上面的邮箱'</span></code></pre><p>查看生成的SSH Key</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cat</span> ~/.ssh/id_rsa.pub</code></pre><p>首次使用还需要执行以下命令以确认并添加主机到本机SSH可信列表</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ssh</span> -T git@github.com</code></pre><p>若返回<code>Hi xxx! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>则证明添加成功</p></li></ul><h4 id="添加SSH-Key到Github"><a href="#添加SSH-Key到Github" class="headerlink" title="添加SSH Key到Github"></a>添加SSH Key到Github</h4><p><img src="https://i.loli.net/2020/11/29/6GZkMUQuNwhvbL2.png" alt="SSH Key 配置到 Github.png"></p><p>创建一个新的SSH key, 标题自由, key则填写上一步骤生成的SSH Key, 点击<code>Add GPG key</code></p><p><img src="https://i.loli.net/2020/11/29/4SPVqDsrIbZgY9A.png" alt="添加 SSH Key.png"></p><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>打开项目根目录下的<code>_config.yml</code>配置文件配置以下参数</p><p><img src="https://i.loli.net/2020/11/29/z63VJRqfSwLI7Ht.png" alt="github本地配置.png"></p><p>执行以下命令安装部署插件</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>执行以下命令后部署完成</p><pre class=" language-bash"><code class="language-bash">$ hexo g -d</code></pre><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><blockquote><p>前提：已拥有实名认证过的域名此过程可在<a href="https://cn.aliyun.com/" target="_blank" rel="noopener">万网</a>完成</p></blockquote><h4 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h4><p>登录控制台后找到你的域名, 点右侧的解析按钮进入解析列表</p><p>添加以下两条<code>CNAME</code> 类型的记录</p><p><img src="https://i.loli.net/2020/11/29/e2xMi7cFNUbVwCA.png" alt="解析域名.png"></p><h4 id="在Github中绑定"><a href="#在Github中绑定" class="headerlink" title="在Github中绑定"></a>在Github中绑定</h4><p>在博客仓库的设置中找到<code>Github Pages</code>并进行以下设定后, 博客搭建完成</p><p><img src="https://i.loli.net/2020/11/29/uBJ186e7hnyFT9j.png" alt="绑定域名.png"></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://segmentfault.com/a/1190000017986794" target="_blank" rel="noopener">超详细Hexo+Github Page搭建技术博客教程</a><br><a href="https://www.jianshu.com/p/eded1dd2d794" target="_blank" rel="noopener">如何搭建个人博客 ？Hexo + GitHub 是一个不错的选择</a><br><a href="https://www.jianshu.com/p/189fd945f38f" target="_blank" rel="noopener">搭建个人博客-hexo+github详细完整步骤</a><br><a href="https://www.jianshu.com/p/d6ef5f02ea18" target="_blank" rel="noopener">用 Github 绑定域名的方法</a></p>]]></content>
      
      
      <categories>
          
          <category> HEXO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用git命令Top10</title>
      <link href="/2019/01/01/shi-yong-git-ming-ling-top10/"/>
      <url>/2019/01/01/shi-yong-git-ming-ling-top10/</url>
      
        <content type="html"><![CDATA[<p>尽管 Git 是一款非常强大的工具，但如果我说 Git 用起来简直是噩梦，大多数人也会认同我的说法。我发现在使用 Git 时，在头脑里可视化地想象它会非常有用：当我执行一个特定命令时，这些分支会如何交互，又会怎样影响历史记录？为什么当我在 master 上执行硬重启，force push 到原分支以及 rimraf 我们的 .git 文件夹时，我的同事哭了？</p><p>我觉得创建一些最常用且最有用的 Git 命令的可视化示例会是一个完美的用例！下面我将介绍的很多命令都有可选参数—你可以使用这些参数来改变对应命令的行为。而我的示例只会涵盖命令的默认行为，而不会添加（或添加太多）可选配置！</p><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>拥有多个分支是很方便的，这样可以将不同的新修改互相隔离开，而且还能确保你不会意外地向生产代码推送未经许可或破损的代码修改。但一旦这些修改得到了批准许可，我们就需要将其部署到我们的生产分支中！</p><p>可将一个分支的修改融入到另一个分支的一种方式是执行 git merge。Git 可执行两种类型的合并：<strong>fast-forward</strong> 和 <strong>no-fast-forward</strong>。现在你可能分不清，但我们马上就来看看它们的差异所在。</p><h4 id="Fast-forward-—ff"><a href="#Fast-forward-—ff" class="headerlink" title="Fast-forward (—ff)"></a>Fast-forward (—ff)</h4><p>在当前分支相比于我们要合并的分支没有额外的提交（commit）时，可以执行 fast-forward 合并。Git 很懒，首先会尝试执行最简单的选项：fast-forward！这类合并不会创建新的提交，而是会将我们正在合并的分支上的提交直接合并到当前分支。</p><p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cT4TSe48--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/894znjv4oo9agqiz4dql.gif" alt="Fast-forward"></p><p>完美！现在，我们在 dev 分支上所做的所有改变都合并到了 master 分支上。那么 no-fast-forward 又是什么意思呢？</p><h4 id="No-fast-foward-—no-ff"><a href="#No-fast-foward-—no-ff" class="headerlink" title="No-fast-foward (—no-ff)"></a>No-fast-foward (—no-ff)</h4><p>如果你的当前分支相比于你想要合并的分支没有任何提交，那当然很好，但很遗憾现实情况很少如此！如果我们在当前分支上提交我们想要合并的分支不具备的改变，那么 git 将会执行 no-fast-forward 合并。</p><p>使用 no-fast-forward 合并时，Git 会在当前活动分支上创建新的 merging commit。这个提交的父提交（parent commit）即指向这个活动分支，也指向我们想要合并的分支！</p><p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zRZ0x2Vc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rf1o2b6eduboqwkigg3w.gif" alt="No-fast-foward"></p><p>没什么大不了的，完美的合并！现在，我们在 dev 分支上所做的所有改变都合并到了 master 分支上。</p><h4 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h4><p>尽管 Git 能够很好地决定如何合并分支以及如何向文件添加修改，但它并不总是能完全自己做决定。当我们想要合并的两个分支的同一文件中的同一行代码上有不同的修改，或者一个分支删除了一个文件而另一个分支修改了这个文件时，Git 就不知道如何取舍了。</p><p>在这样的情况下，Git 会询问你想要保留哪种选择？假设在这两个分支中，我们都编辑了 README.md 的第一行。</p><p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jXqGWUai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m3nxmp67mqof5sa3iik9.png" alt="合并冲突的场景">如果我们想把 dev 合并到 master，就会出现一个合并冲突：你想要标题是 Hello! 还是 Hey!？</p><p>当尝试合并这些分支时，Git 会向你展示冲突出现的位置。我们可以手动移除我们不想保留的修改，保存这些修改，再次添加这个已修改的文件，然后提交这些修改。</p><p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7lBksXwA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bcd5ajtoc0g5dxzmpfbq.gif" alt="合并冲突"></p><p>完成！尽管合并冲突往往很让人厌烦，但这是合理的：Git 不应该瞎猜我们想要保留哪些修改。</p><h3 id="变基（Rebasing）"><a href="#变基（Rebasing）" class="headerlink" title="变基（Rebasing）"></a>变基（Rebasing）</h3><p>我们刚看到可通过执行 git merge 将一个分支的修改应用到另一个分支。另一种可将一个分支的修改融入到另一个分支的方式是执行 git rebase。</p><p>git rebase 会将当前分支的提交复制到指定的分支之上。</p><p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EIY4OOcE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dwyukhq8yj2xliq4i50e.gif" alt="变基"></p><p>完美，现在我们在 dev 分支上获取了 master 分支上的所有修改。</p><p>变基与合并有一个重大的区别：Git 不会尝试确定要保留或不保留哪些文件。我们执行 rebase 的分支总是含有我们想要保留的最新近的修改！这样我们不会遇到任何合并冲突，而且可以保留一个漂亮的、线性的 Git 历史记录。</p><p>上面这个例子展示了在 master 分支上的变基。但是，在更大型的项目中，你通常不需要这样的操作。git rebase 在为复制的提交创建新的 hash 时会修改项目的历史记录。</p><p>如果你在开发一个 feature 分支并且 master 分支已经更新过，那么变基就很好用。你可以在你的分支上获取所有更新，这能防止未来出现合并冲突。</p><h4 id="交互式变基（Interactive-Rebase）"><a href="#交互式变基（Interactive-Rebase）" class="headerlink" title="交互式变基（Interactive Rebase）"></a>交互式变基（Interactive Rebase）</h4><p>在为提交执行变基之前，我们可以修改它们！我们可以使用交互式变基来完成这一任务。交互式变基在你当前开发的分支上以及想要修改某些提交时会很有用。<br>在我们正在 rebase 的提交上，我们可以执行以下 6 个动作：</p><ul><li>reword：修改提交信息；</li><li>edit：修改此提交；</li><li>squash：将提交融合到前一个提交中；</li><li>fixup：将提交融合到前一个提交中，不保留该提交的日志消息；</li><li>exec：在每个提交上运行我们想要 rebase 的命令；</li><li>drop：移除该提交。</li></ul><p>很棒！这样我们就能完全控制我们的提交了。如果你想要移除一个提交，只需 drop 即可。</p><p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P6jr7igd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/msofpv7k6rcmpaaefscm.gif" alt="交互式变基"></p><p>如果你想把多个提交融合到一起以便得到清晰的提交历史，那也没有问题！</p><p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VSQt4g1V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bc1r460xx1i0blu0lnnm.gif" alt="多个提交融合"></p><p>交互式变基能为你在 rebase 时提供大量控制，甚至可以控制当前的活动分支。</p><h3 id="重置（Resetting）"><a href="#重置（Resetting）" class="headerlink" title="重置（Resetting）"></a>重置（Resetting）</h3><p>当我们不想要之前提交的修改时，就会用到这个命令。也许这是一个 WIP 提交或者可能是引入了 bug 的提交，这时候就要执行 git reset。</p><p>git reset 能让我们不再使用当前台面上的文件，让我们可以控制 HEAD 应该指向的位置。</p><h4 id="软重置"><a href="#软重置" class="headerlink" title="软重置"></a>软重置</h4><p>软重置会将 HEAD 移至指定的提交（或与 HEAD 相比的提交的索引），而不会移除该提交之后加入的修改！</p><p>假设我们不想保留添加了一个 style.css 文件的提交 9e78i，而且我们也不想保留添加了一个 index.js 文件的提交 035cc。但是，我们确实又想要保留新添加的 style.css 和 index.js 文件！这是软重置的一个完美用例。</p><p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s---GveiZe---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/je5240aqa5uw9d8j3ibb.gif" alt="软重置"></p><p>输入 git status 后，你会看到我们仍然可以访问在之前的提交上做过的所有修改。这很好，这意味着我们可以修复这些文件的内容，之后再重新提交它们！</p><h4 id="硬重置"><a href="#硬重置" class="headerlink" title="硬重置"></a>硬重置</h4><p>有时候我们并不想保留特定提交引入的修改。不同于软重置，我们应该再也无需访问它们。Git 应该直接将整体状态直接重置到特定提交之前的状态：这甚至包括你在工作目录中和暂存文件上的修改。</p><p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GqjwnYkF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hlh0kowt3hov1xhcku38.gif" alt="硬重置"></p><p>Git 丢弃了 9e78i 和 035cc 引入的修改，并将状态重置到了 ec5be 的状态。</p><h3 id="还原（Reverting）"><a href="#还原（Reverting）" class="headerlink" title="还原（Reverting）"></a>还原（Reverting）</h3><p>另一种撤销修改的方法是执行 git revert。通过对特定的提交执行还原操作，我们会创建一个包含已还原修改的新提交。</p><p>假设 ec5be 添加了一个 index.js 文件。但之后我们发现其实我们再也不需要由这个提交引入的修改了。那就还原 ec5be 提交吧！</p><p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eckmvr2M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3kkd2ahn41zixs12xgpf.gif" alt="还原"></p><p>完美！提交 9e78i 还原了由提交 ec5be 引入的修改。在撤销特定的提交时，git revert 非常有用，同时也不会修改分支的历史。</p><h3 id="拣选（Cherry-picking）"><a href="#拣选（Cherry-picking）" class="headerlink" title="拣选（Cherry-picking）"></a>拣选（Cherry-picking）</h3><p>当一个特定分支包含我们的活动分支需要的某个提交时，我们对那个提交执行 cherry-pick！对一个提交执行 cherry-pick 时，我们会在活动分支上创建一个新的提交，其中包含由拣选出来的提交所引入的修改。</p><p>假设 dev 分支上的提交 76d12 为 index.js 文件添加了一项修改，而我们希望将其整合到 master 分支中。我们并不想要整个 dev 分支，而只需要这个提交！</p><p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9vWP_K4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2dkjx4yeaal10xyvj29v.gif" alt="拣选"></p><p>现在 master 分支包含 76d12 引入的修改了。</p><h3 id="取回（Fetching）"><a href="#取回（Fetching）" class="headerlink" title="取回（Fetching）"></a>取回（Fetching）</h3><p>如果你有一个远程 Git 分支，比如在 GitHub 上的分支，当远程分支上包含当前分支没有的提交时，可以使用取回。比如当合并了另一个分支或你的同事推送了一个快速修复时。</p><p>通过在这个远程分支上执行 git fetch，我们就可在本地获取这些修改。这不会以任何方式影响你的本地分支：fetch 只是单纯地下载新的数据而已。</p><p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--38PuARw2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bulx1voegfji4vwgndh4.gif" alt="取回"></p><p>现在我们可以看到自上次推送以来的所有修改了。这些新数据也已经在本地了，我们可以决定用这些新数据做什么了。</p><h3 id="拉取（Pulling）"><a href="#拉取（Pulling）" class="headerlink" title="拉取（Pulling）"></a>拉取（Pulling）</h3><p>尽管 git fetch 可用于获取某个分支的远程信息，但我们也可以执行 git pull。git pull 实际上是两个命令合成了一个：git fetch 和 git merge。当我们从来源拉取修改时，我们首先是像 git fetch 那样取回所有数据，然后最新的修改会自动合并到本地分支中。</p><p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s---X5AXldj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zifpnl1h6a4tk4qdc9sy.gif" alt="拉取"></p><p>很好，我们现在与远程分支完美同步了，并且也有了所有最新的修改！</p><h3 id="Reflog"><a href="#Reflog" class="headerlink" title="Reflog"></a>Reflog</h3><p>每个人都会犯错，但犯错其实没啥！有时候你可能感觉你把 git repo 完全搞坏了，让你想完全删了了事。</p><p>git reflog 是一个非常有用的命令，可以展示已经执行过的所有动作的日志。包括合并、重置、还原，基本上包含你对你的分支所做的任何修改。</p><p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MMUdOS0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1aqek1py1knwl926ele7.gif" alt="Reflog"></p><p>如果你犯了错，你可以根据 reflog 提供的信息通过重置 HEAD 来轻松地重做！</p><p>假设我们实际上并不需要合并原有分支。当我们执行 git reflog 命令时，我们可以看到这个 repo 的状态在合并前位于 HEAD@{1}。那我们就执行一次 git reset，将 HEAD 重新指向在 HEAD@{1} 的位置。</p><p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A1UMM2AH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9z9rhtbw7mrigp0miijz.gif" alt="重置HEAD"></p><p>我们可以看到最新的动作已被推送给 reflog。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
